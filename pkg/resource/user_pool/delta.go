// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package user_pool

import (
	"bytes"
	"reflect"

	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	acktags "github.com/aws-controllers-k8s/runtime/pkg/tags"
)

// Hack to avoid import errors during build...
var (
	_ = &bytes.Buffer{}
	_ = &reflect.Method{}
	_ = &acktags.Tags{}
)

// newResourceDelta returns a new `ackcompare.Delta` used to compare two
// resources
func newResourceDelta(
	a *resource,
	b *resource,
) *ackcompare.Delta {
	delta := ackcompare.NewDelta()
	if (a == nil && b != nil) ||
		(a != nil && b == nil) {
		delta.Add("", a, b)
		return delta
	}

	if ackcompare.HasNilDifference(a.ko.Spec.AccountRecoverySetting, b.ko.Spec.AccountRecoverySetting) {
		delta.Add("Spec.AccountRecoverySetting", a.ko.Spec.AccountRecoverySetting, b.ko.Spec.AccountRecoverySetting)
	} else if a.ko.Spec.AccountRecoverySetting != nil && b.ko.Spec.AccountRecoverySetting != nil {
		if len(a.ko.Spec.AccountRecoverySetting.RecoveryMechanisms) != len(b.ko.Spec.AccountRecoverySetting.RecoveryMechanisms) {
			delta.Add("Spec.AccountRecoverySetting.RecoveryMechanisms", a.ko.Spec.AccountRecoverySetting.RecoveryMechanisms, b.ko.Spec.AccountRecoverySetting.RecoveryMechanisms)
		} else if len(a.ko.Spec.AccountRecoverySetting.RecoveryMechanisms) > 0 {
			if !reflect.DeepEqual(a.ko.Spec.AccountRecoverySetting.RecoveryMechanisms, b.ko.Spec.AccountRecoverySetting.RecoveryMechanisms) {
				delta.Add("Spec.AccountRecoverySetting.RecoveryMechanisms", a.ko.Spec.AccountRecoverySetting.RecoveryMechanisms, b.ko.Spec.AccountRecoverySetting.RecoveryMechanisms)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.AdminCreateUserConfig, b.ko.Spec.AdminCreateUserConfig) {
		delta.Add("Spec.AdminCreateUserConfig", a.ko.Spec.AdminCreateUserConfig, b.ko.Spec.AdminCreateUserConfig)
	} else if a.ko.Spec.AdminCreateUserConfig != nil && b.ko.Spec.AdminCreateUserConfig != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.AdminCreateUserConfig.AllowAdminCreateUserOnly, b.ko.Spec.AdminCreateUserConfig.AllowAdminCreateUserOnly) {
			delta.Add("Spec.AdminCreateUserConfig.AllowAdminCreateUserOnly", a.ko.Spec.AdminCreateUserConfig.AllowAdminCreateUserOnly, b.ko.Spec.AdminCreateUserConfig.AllowAdminCreateUserOnly)
		} else if a.ko.Spec.AdminCreateUserConfig.AllowAdminCreateUserOnly != nil && b.ko.Spec.AdminCreateUserConfig.AllowAdminCreateUserOnly != nil {
			if *a.ko.Spec.AdminCreateUserConfig.AllowAdminCreateUserOnly != *b.ko.Spec.AdminCreateUserConfig.AllowAdminCreateUserOnly {
				delta.Add("Spec.AdminCreateUserConfig.AllowAdminCreateUserOnly", a.ko.Spec.AdminCreateUserConfig.AllowAdminCreateUserOnly, b.ko.Spec.AdminCreateUserConfig.AllowAdminCreateUserOnly)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.AdminCreateUserConfig.InviteMessageTemplate, b.ko.Spec.AdminCreateUserConfig.InviteMessageTemplate) {
			delta.Add("Spec.AdminCreateUserConfig.InviteMessageTemplate", a.ko.Spec.AdminCreateUserConfig.InviteMessageTemplate, b.ko.Spec.AdminCreateUserConfig.InviteMessageTemplate)
		} else if a.ko.Spec.AdminCreateUserConfig.InviteMessageTemplate != nil && b.ko.Spec.AdminCreateUserConfig.InviteMessageTemplate != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.AdminCreateUserConfig.InviteMessageTemplate.EmailMessage, b.ko.Spec.AdminCreateUserConfig.InviteMessageTemplate.EmailMessage) {
				delta.Add("Spec.AdminCreateUserConfig.InviteMessageTemplate.EmailMessage", a.ko.Spec.AdminCreateUserConfig.InviteMessageTemplate.EmailMessage, b.ko.Spec.AdminCreateUserConfig.InviteMessageTemplate.EmailMessage)
			} else if a.ko.Spec.AdminCreateUserConfig.InviteMessageTemplate.EmailMessage != nil && b.ko.Spec.AdminCreateUserConfig.InviteMessageTemplate.EmailMessage != nil {
				if *a.ko.Spec.AdminCreateUserConfig.InviteMessageTemplate.EmailMessage != *b.ko.Spec.AdminCreateUserConfig.InviteMessageTemplate.EmailMessage {
					delta.Add("Spec.AdminCreateUserConfig.InviteMessageTemplate.EmailMessage", a.ko.Spec.AdminCreateUserConfig.InviteMessageTemplate.EmailMessage, b.ko.Spec.AdminCreateUserConfig.InviteMessageTemplate.EmailMessage)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.AdminCreateUserConfig.InviteMessageTemplate.EmailSubject, b.ko.Spec.AdminCreateUserConfig.InviteMessageTemplate.EmailSubject) {
				delta.Add("Spec.AdminCreateUserConfig.InviteMessageTemplate.EmailSubject", a.ko.Spec.AdminCreateUserConfig.InviteMessageTemplate.EmailSubject, b.ko.Spec.AdminCreateUserConfig.InviteMessageTemplate.EmailSubject)
			} else if a.ko.Spec.AdminCreateUserConfig.InviteMessageTemplate.EmailSubject != nil && b.ko.Spec.AdminCreateUserConfig.InviteMessageTemplate.EmailSubject != nil {
				if *a.ko.Spec.AdminCreateUserConfig.InviteMessageTemplate.EmailSubject != *b.ko.Spec.AdminCreateUserConfig.InviteMessageTemplate.EmailSubject {
					delta.Add("Spec.AdminCreateUserConfig.InviteMessageTemplate.EmailSubject", a.ko.Spec.AdminCreateUserConfig.InviteMessageTemplate.EmailSubject, b.ko.Spec.AdminCreateUserConfig.InviteMessageTemplate.EmailSubject)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.AdminCreateUserConfig.InviteMessageTemplate.SMSMessage, b.ko.Spec.AdminCreateUserConfig.InviteMessageTemplate.SMSMessage) {
				delta.Add("Spec.AdminCreateUserConfig.InviteMessageTemplate.SMSMessage", a.ko.Spec.AdminCreateUserConfig.InviteMessageTemplate.SMSMessage, b.ko.Spec.AdminCreateUserConfig.InviteMessageTemplate.SMSMessage)
			} else if a.ko.Spec.AdminCreateUserConfig.InviteMessageTemplate.SMSMessage != nil && b.ko.Spec.AdminCreateUserConfig.InviteMessageTemplate.SMSMessage != nil {
				if *a.ko.Spec.AdminCreateUserConfig.InviteMessageTemplate.SMSMessage != *b.ko.Spec.AdminCreateUserConfig.InviteMessageTemplate.SMSMessage {
					delta.Add("Spec.AdminCreateUserConfig.InviteMessageTemplate.SMSMessage", a.ko.Spec.AdminCreateUserConfig.InviteMessageTemplate.SMSMessage, b.ko.Spec.AdminCreateUserConfig.InviteMessageTemplate.SMSMessage)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.AdminCreateUserConfig.UnusedAccountValidityDays, b.ko.Spec.AdminCreateUserConfig.UnusedAccountValidityDays) {
			delta.Add("Spec.AdminCreateUserConfig.UnusedAccountValidityDays", a.ko.Spec.AdminCreateUserConfig.UnusedAccountValidityDays, b.ko.Spec.AdminCreateUserConfig.UnusedAccountValidityDays)
		} else if a.ko.Spec.AdminCreateUserConfig.UnusedAccountValidityDays != nil && b.ko.Spec.AdminCreateUserConfig.UnusedAccountValidityDays != nil {
			if *a.ko.Spec.AdminCreateUserConfig.UnusedAccountValidityDays != *b.ko.Spec.AdminCreateUserConfig.UnusedAccountValidityDays {
				delta.Add("Spec.AdminCreateUserConfig.UnusedAccountValidityDays", a.ko.Spec.AdminCreateUserConfig.UnusedAccountValidityDays, b.ko.Spec.AdminCreateUserConfig.UnusedAccountValidityDays)
			}
		}
	}
	if len(a.ko.Spec.AliasAttributes) != len(b.ko.Spec.AliasAttributes) {
		delta.Add("Spec.AliasAttributes", a.ko.Spec.AliasAttributes, b.ko.Spec.AliasAttributes)
	} else if len(a.ko.Spec.AliasAttributes) > 0 {
		if !ackcompare.SliceStringPEqual(a.ko.Spec.AliasAttributes, b.ko.Spec.AliasAttributes) {
			delta.Add("Spec.AliasAttributes", a.ko.Spec.AliasAttributes, b.ko.Spec.AliasAttributes)
		}
	}
	if len(a.ko.Spec.AutoVerifiedAttributes) != len(b.ko.Spec.AutoVerifiedAttributes) {
		delta.Add("Spec.AutoVerifiedAttributes", a.ko.Spec.AutoVerifiedAttributes, b.ko.Spec.AutoVerifiedAttributes)
	} else if len(a.ko.Spec.AutoVerifiedAttributes) > 0 {
		if !ackcompare.SliceStringPEqual(a.ko.Spec.AutoVerifiedAttributes, b.ko.Spec.AutoVerifiedAttributes) {
			delta.Add("Spec.AutoVerifiedAttributes", a.ko.Spec.AutoVerifiedAttributes, b.ko.Spec.AutoVerifiedAttributes)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.DeletionProtection, b.ko.Spec.DeletionProtection) {
		delta.Add("Spec.DeletionProtection", a.ko.Spec.DeletionProtection, b.ko.Spec.DeletionProtection)
	} else if a.ko.Spec.DeletionProtection != nil && b.ko.Spec.DeletionProtection != nil {
		if *a.ko.Spec.DeletionProtection != *b.ko.Spec.DeletionProtection {
			delta.Add("Spec.DeletionProtection", a.ko.Spec.DeletionProtection, b.ko.Spec.DeletionProtection)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.DeviceConfiguration, b.ko.Spec.DeviceConfiguration) {
		delta.Add("Spec.DeviceConfiguration", a.ko.Spec.DeviceConfiguration, b.ko.Spec.DeviceConfiguration)
	} else if a.ko.Spec.DeviceConfiguration != nil && b.ko.Spec.DeviceConfiguration != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.DeviceConfiguration.ChallengeRequiredOnNewDevice, b.ko.Spec.DeviceConfiguration.ChallengeRequiredOnNewDevice) {
			delta.Add("Spec.DeviceConfiguration.ChallengeRequiredOnNewDevice", a.ko.Spec.DeviceConfiguration.ChallengeRequiredOnNewDevice, b.ko.Spec.DeviceConfiguration.ChallengeRequiredOnNewDevice)
		} else if a.ko.Spec.DeviceConfiguration.ChallengeRequiredOnNewDevice != nil && b.ko.Spec.DeviceConfiguration.ChallengeRequiredOnNewDevice != nil {
			if *a.ko.Spec.DeviceConfiguration.ChallengeRequiredOnNewDevice != *b.ko.Spec.DeviceConfiguration.ChallengeRequiredOnNewDevice {
				delta.Add("Spec.DeviceConfiguration.ChallengeRequiredOnNewDevice", a.ko.Spec.DeviceConfiguration.ChallengeRequiredOnNewDevice, b.ko.Spec.DeviceConfiguration.ChallengeRequiredOnNewDevice)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.DeviceConfiguration.DeviceOnlyRememberedOnUserPrompt, b.ko.Spec.DeviceConfiguration.DeviceOnlyRememberedOnUserPrompt) {
			delta.Add("Spec.DeviceConfiguration.DeviceOnlyRememberedOnUserPrompt", a.ko.Spec.DeviceConfiguration.DeviceOnlyRememberedOnUserPrompt, b.ko.Spec.DeviceConfiguration.DeviceOnlyRememberedOnUserPrompt)
		} else if a.ko.Spec.DeviceConfiguration.DeviceOnlyRememberedOnUserPrompt != nil && b.ko.Spec.DeviceConfiguration.DeviceOnlyRememberedOnUserPrompt != nil {
			if *a.ko.Spec.DeviceConfiguration.DeviceOnlyRememberedOnUserPrompt != *b.ko.Spec.DeviceConfiguration.DeviceOnlyRememberedOnUserPrompt {
				delta.Add("Spec.DeviceConfiguration.DeviceOnlyRememberedOnUserPrompt", a.ko.Spec.DeviceConfiguration.DeviceOnlyRememberedOnUserPrompt, b.ko.Spec.DeviceConfiguration.DeviceOnlyRememberedOnUserPrompt)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.EmailConfiguration, b.ko.Spec.EmailConfiguration) {
		delta.Add("Spec.EmailConfiguration", a.ko.Spec.EmailConfiguration, b.ko.Spec.EmailConfiguration)
	} else if a.ko.Spec.EmailConfiguration != nil && b.ko.Spec.EmailConfiguration != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.EmailConfiguration.ConfigurationSet, b.ko.Spec.EmailConfiguration.ConfigurationSet) {
			delta.Add("Spec.EmailConfiguration.ConfigurationSet", a.ko.Spec.EmailConfiguration.ConfigurationSet, b.ko.Spec.EmailConfiguration.ConfigurationSet)
		} else if a.ko.Spec.EmailConfiguration.ConfigurationSet != nil && b.ko.Spec.EmailConfiguration.ConfigurationSet != nil {
			if *a.ko.Spec.EmailConfiguration.ConfigurationSet != *b.ko.Spec.EmailConfiguration.ConfigurationSet {
				delta.Add("Spec.EmailConfiguration.ConfigurationSet", a.ko.Spec.EmailConfiguration.ConfigurationSet, b.ko.Spec.EmailConfiguration.ConfigurationSet)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.EmailConfiguration.EmailSendingAccount, b.ko.Spec.EmailConfiguration.EmailSendingAccount) {
			delta.Add("Spec.EmailConfiguration.EmailSendingAccount", a.ko.Spec.EmailConfiguration.EmailSendingAccount, b.ko.Spec.EmailConfiguration.EmailSendingAccount)
		} else if a.ko.Spec.EmailConfiguration.EmailSendingAccount != nil && b.ko.Spec.EmailConfiguration.EmailSendingAccount != nil {
			if *a.ko.Spec.EmailConfiguration.EmailSendingAccount != *b.ko.Spec.EmailConfiguration.EmailSendingAccount {
				delta.Add("Spec.EmailConfiguration.EmailSendingAccount", a.ko.Spec.EmailConfiguration.EmailSendingAccount, b.ko.Spec.EmailConfiguration.EmailSendingAccount)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.EmailConfiguration.From, b.ko.Spec.EmailConfiguration.From) {
			delta.Add("Spec.EmailConfiguration.From", a.ko.Spec.EmailConfiguration.From, b.ko.Spec.EmailConfiguration.From)
		} else if a.ko.Spec.EmailConfiguration.From != nil && b.ko.Spec.EmailConfiguration.From != nil {
			if *a.ko.Spec.EmailConfiguration.From != *b.ko.Spec.EmailConfiguration.From {
				delta.Add("Spec.EmailConfiguration.From", a.ko.Spec.EmailConfiguration.From, b.ko.Spec.EmailConfiguration.From)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.EmailConfiguration.ReplyToEmailAddress, b.ko.Spec.EmailConfiguration.ReplyToEmailAddress) {
			delta.Add("Spec.EmailConfiguration.ReplyToEmailAddress", a.ko.Spec.EmailConfiguration.ReplyToEmailAddress, b.ko.Spec.EmailConfiguration.ReplyToEmailAddress)
		} else if a.ko.Spec.EmailConfiguration.ReplyToEmailAddress != nil && b.ko.Spec.EmailConfiguration.ReplyToEmailAddress != nil {
			if *a.ko.Spec.EmailConfiguration.ReplyToEmailAddress != *b.ko.Spec.EmailConfiguration.ReplyToEmailAddress {
				delta.Add("Spec.EmailConfiguration.ReplyToEmailAddress", a.ko.Spec.EmailConfiguration.ReplyToEmailAddress, b.ko.Spec.EmailConfiguration.ReplyToEmailAddress)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.EmailConfiguration.SourceARN, b.ko.Spec.EmailConfiguration.SourceARN) {
			delta.Add("Spec.EmailConfiguration.SourceARN", a.ko.Spec.EmailConfiguration.SourceARN, b.ko.Spec.EmailConfiguration.SourceARN)
		} else if a.ko.Spec.EmailConfiguration.SourceARN != nil && b.ko.Spec.EmailConfiguration.SourceARN != nil {
			if *a.ko.Spec.EmailConfiguration.SourceARN != *b.ko.Spec.EmailConfiguration.SourceARN {
				delta.Add("Spec.EmailConfiguration.SourceARN", a.ko.Spec.EmailConfiguration.SourceARN, b.ko.Spec.EmailConfiguration.SourceARN)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.EmailVerificationMessage, b.ko.Spec.EmailVerificationMessage) {
		delta.Add("Spec.EmailVerificationMessage", a.ko.Spec.EmailVerificationMessage, b.ko.Spec.EmailVerificationMessage)
	} else if a.ko.Spec.EmailVerificationMessage != nil && b.ko.Spec.EmailVerificationMessage != nil {
		if *a.ko.Spec.EmailVerificationMessage != *b.ko.Spec.EmailVerificationMessage {
			delta.Add("Spec.EmailVerificationMessage", a.ko.Spec.EmailVerificationMessage, b.ko.Spec.EmailVerificationMessage)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.EmailVerificationSubject, b.ko.Spec.EmailVerificationSubject) {
		delta.Add("Spec.EmailVerificationSubject", a.ko.Spec.EmailVerificationSubject, b.ko.Spec.EmailVerificationSubject)
	} else if a.ko.Spec.EmailVerificationSubject != nil && b.ko.Spec.EmailVerificationSubject != nil {
		if *a.ko.Spec.EmailVerificationSubject != *b.ko.Spec.EmailVerificationSubject {
			delta.Add("Spec.EmailVerificationSubject", a.ko.Spec.EmailVerificationSubject, b.ko.Spec.EmailVerificationSubject)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.LambdaConfig, b.ko.Spec.LambdaConfig) {
		delta.Add("Spec.LambdaConfig", a.ko.Spec.LambdaConfig, b.ko.Spec.LambdaConfig)
	} else if a.ko.Spec.LambdaConfig != nil && b.ko.Spec.LambdaConfig != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.LambdaConfig.CreateAuthChallenge, b.ko.Spec.LambdaConfig.CreateAuthChallenge) {
			delta.Add("Spec.LambdaConfig.CreateAuthChallenge", a.ko.Spec.LambdaConfig.CreateAuthChallenge, b.ko.Spec.LambdaConfig.CreateAuthChallenge)
		} else if a.ko.Spec.LambdaConfig.CreateAuthChallenge != nil && b.ko.Spec.LambdaConfig.CreateAuthChallenge != nil {
			if *a.ko.Spec.LambdaConfig.CreateAuthChallenge != *b.ko.Spec.LambdaConfig.CreateAuthChallenge {
				delta.Add("Spec.LambdaConfig.CreateAuthChallenge", a.ko.Spec.LambdaConfig.CreateAuthChallenge, b.ko.Spec.LambdaConfig.CreateAuthChallenge)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.LambdaConfig.CustomEmailSender, b.ko.Spec.LambdaConfig.CustomEmailSender) {
			delta.Add("Spec.LambdaConfig.CustomEmailSender", a.ko.Spec.LambdaConfig.CustomEmailSender, b.ko.Spec.LambdaConfig.CustomEmailSender)
		} else if a.ko.Spec.LambdaConfig.CustomEmailSender != nil && b.ko.Spec.LambdaConfig.CustomEmailSender != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.LambdaConfig.CustomEmailSender.LambdaARN, b.ko.Spec.LambdaConfig.CustomEmailSender.LambdaARN) {
				delta.Add("Spec.LambdaConfig.CustomEmailSender.LambdaARN", a.ko.Spec.LambdaConfig.CustomEmailSender.LambdaARN, b.ko.Spec.LambdaConfig.CustomEmailSender.LambdaARN)
			} else if a.ko.Spec.LambdaConfig.CustomEmailSender.LambdaARN != nil && b.ko.Spec.LambdaConfig.CustomEmailSender.LambdaARN != nil {
				if *a.ko.Spec.LambdaConfig.CustomEmailSender.LambdaARN != *b.ko.Spec.LambdaConfig.CustomEmailSender.LambdaARN {
					delta.Add("Spec.LambdaConfig.CustomEmailSender.LambdaARN", a.ko.Spec.LambdaConfig.CustomEmailSender.LambdaARN, b.ko.Spec.LambdaConfig.CustomEmailSender.LambdaARN)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.LambdaConfig.CustomEmailSender.LambdaVersion, b.ko.Spec.LambdaConfig.CustomEmailSender.LambdaVersion) {
				delta.Add("Spec.LambdaConfig.CustomEmailSender.LambdaVersion", a.ko.Spec.LambdaConfig.CustomEmailSender.LambdaVersion, b.ko.Spec.LambdaConfig.CustomEmailSender.LambdaVersion)
			} else if a.ko.Spec.LambdaConfig.CustomEmailSender.LambdaVersion != nil && b.ko.Spec.LambdaConfig.CustomEmailSender.LambdaVersion != nil {
				if *a.ko.Spec.LambdaConfig.CustomEmailSender.LambdaVersion != *b.ko.Spec.LambdaConfig.CustomEmailSender.LambdaVersion {
					delta.Add("Spec.LambdaConfig.CustomEmailSender.LambdaVersion", a.ko.Spec.LambdaConfig.CustomEmailSender.LambdaVersion, b.ko.Spec.LambdaConfig.CustomEmailSender.LambdaVersion)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.LambdaConfig.CustomMessage, b.ko.Spec.LambdaConfig.CustomMessage) {
			delta.Add("Spec.LambdaConfig.CustomMessage", a.ko.Spec.LambdaConfig.CustomMessage, b.ko.Spec.LambdaConfig.CustomMessage)
		} else if a.ko.Spec.LambdaConfig.CustomMessage != nil && b.ko.Spec.LambdaConfig.CustomMessage != nil {
			if *a.ko.Spec.LambdaConfig.CustomMessage != *b.ko.Spec.LambdaConfig.CustomMessage {
				delta.Add("Spec.LambdaConfig.CustomMessage", a.ko.Spec.LambdaConfig.CustomMessage, b.ko.Spec.LambdaConfig.CustomMessage)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.LambdaConfig.CustomSMSSender, b.ko.Spec.LambdaConfig.CustomSMSSender) {
			delta.Add("Spec.LambdaConfig.CustomSMSSender", a.ko.Spec.LambdaConfig.CustomSMSSender, b.ko.Spec.LambdaConfig.CustomSMSSender)
		} else if a.ko.Spec.LambdaConfig.CustomSMSSender != nil && b.ko.Spec.LambdaConfig.CustomSMSSender != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.LambdaConfig.CustomSMSSender.LambdaARN, b.ko.Spec.LambdaConfig.CustomSMSSender.LambdaARN) {
				delta.Add("Spec.LambdaConfig.CustomSMSSender.LambdaARN", a.ko.Spec.LambdaConfig.CustomSMSSender.LambdaARN, b.ko.Spec.LambdaConfig.CustomSMSSender.LambdaARN)
			} else if a.ko.Spec.LambdaConfig.CustomSMSSender.LambdaARN != nil && b.ko.Spec.LambdaConfig.CustomSMSSender.LambdaARN != nil {
				if *a.ko.Spec.LambdaConfig.CustomSMSSender.LambdaARN != *b.ko.Spec.LambdaConfig.CustomSMSSender.LambdaARN {
					delta.Add("Spec.LambdaConfig.CustomSMSSender.LambdaARN", a.ko.Spec.LambdaConfig.CustomSMSSender.LambdaARN, b.ko.Spec.LambdaConfig.CustomSMSSender.LambdaARN)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.LambdaConfig.CustomSMSSender.LambdaVersion, b.ko.Spec.LambdaConfig.CustomSMSSender.LambdaVersion) {
				delta.Add("Spec.LambdaConfig.CustomSMSSender.LambdaVersion", a.ko.Spec.LambdaConfig.CustomSMSSender.LambdaVersion, b.ko.Spec.LambdaConfig.CustomSMSSender.LambdaVersion)
			} else if a.ko.Spec.LambdaConfig.CustomSMSSender.LambdaVersion != nil && b.ko.Spec.LambdaConfig.CustomSMSSender.LambdaVersion != nil {
				if *a.ko.Spec.LambdaConfig.CustomSMSSender.LambdaVersion != *b.ko.Spec.LambdaConfig.CustomSMSSender.LambdaVersion {
					delta.Add("Spec.LambdaConfig.CustomSMSSender.LambdaVersion", a.ko.Spec.LambdaConfig.CustomSMSSender.LambdaVersion, b.ko.Spec.LambdaConfig.CustomSMSSender.LambdaVersion)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.LambdaConfig.DefineAuthChallenge, b.ko.Spec.LambdaConfig.DefineAuthChallenge) {
			delta.Add("Spec.LambdaConfig.DefineAuthChallenge", a.ko.Spec.LambdaConfig.DefineAuthChallenge, b.ko.Spec.LambdaConfig.DefineAuthChallenge)
		} else if a.ko.Spec.LambdaConfig.DefineAuthChallenge != nil && b.ko.Spec.LambdaConfig.DefineAuthChallenge != nil {
			if *a.ko.Spec.LambdaConfig.DefineAuthChallenge != *b.ko.Spec.LambdaConfig.DefineAuthChallenge {
				delta.Add("Spec.LambdaConfig.DefineAuthChallenge", a.ko.Spec.LambdaConfig.DefineAuthChallenge, b.ko.Spec.LambdaConfig.DefineAuthChallenge)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.LambdaConfig.KMSKeyID, b.ko.Spec.LambdaConfig.KMSKeyID) {
			delta.Add("Spec.LambdaConfig.KMSKeyID", a.ko.Spec.LambdaConfig.KMSKeyID, b.ko.Spec.LambdaConfig.KMSKeyID)
		} else if a.ko.Spec.LambdaConfig.KMSKeyID != nil && b.ko.Spec.LambdaConfig.KMSKeyID != nil {
			if *a.ko.Spec.LambdaConfig.KMSKeyID != *b.ko.Spec.LambdaConfig.KMSKeyID {
				delta.Add("Spec.LambdaConfig.KMSKeyID", a.ko.Spec.LambdaConfig.KMSKeyID, b.ko.Spec.LambdaConfig.KMSKeyID)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.LambdaConfig.PostAuthentication, b.ko.Spec.LambdaConfig.PostAuthentication) {
			delta.Add("Spec.LambdaConfig.PostAuthentication", a.ko.Spec.LambdaConfig.PostAuthentication, b.ko.Spec.LambdaConfig.PostAuthentication)
		} else if a.ko.Spec.LambdaConfig.PostAuthentication != nil && b.ko.Spec.LambdaConfig.PostAuthentication != nil {
			if *a.ko.Spec.LambdaConfig.PostAuthentication != *b.ko.Spec.LambdaConfig.PostAuthentication {
				delta.Add("Spec.LambdaConfig.PostAuthentication", a.ko.Spec.LambdaConfig.PostAuthentication, b.ko.Spec.LambdaConfig.PostAuthentication)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.LambdaConfig.PostConfirmation, b.ko.Spec.LambdaConfig.PostConfirmation) {
			delta.Add("Spec.LambdaConfig.PostConfirmation", a.ko.Spec.LambdaConfig.PostConfirmation, b.ko.Spec.LambdaConfig.PostConfirmation)
		} else if a.ko.Spec.LambdaConfig.PostConfirmation != nil && b.ko.Spec.LambdaConfig.PostConfirmation != nil {
			if *a.ko.Spec.LambdaConfig.PostConfirmation != *b.ko.Spec.LambdaConfig.PostConfirmation {
				delta.Add("Spec.LambdaConfig.PostConfirmation", a.ko.Spec.LambdaConfig.PostConfirmation, b.ko.Spec.LambdaConfig.PostConfirmation)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.LambdaConfig.PreAuthentication, b.ko.Spec.LambdaConfig.PreAuthentication) {
			delta.Add("Spec.LambdaConfig.PreAuthentication", a.ko.Spec.LambdaConfig.PreAuthentication, b.ko.Spec.LambdaConfig.PreAuthentication)
		} else if a.ko.Spec.LambdaConfig.PreAuthentication != nil && b.ko.Spec.LambdaConfig.PreAuthentication != nil {
			if *a.ko.Spec.LambdaConfig.PreAuthentication != *b.ko.Spec.LambdaConfig.PreAuthentication {
				delta.Add("Spec.LambdaConfig.PreAuthentication", a.ko.Spec.LambdaConfig.PreAuthentication, b.ko.Spec.LambdaConfig.PreAuthentication)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.LambdaConfig.PreSignUp, b.ko.Spec.LambdaConfig.PreSignUp) {
			delta.Add("Spec.LambdaConfig.PreSignUp", a.ko.Spec.LambdaConfig.PreSignUp, b.ko.Spec.LambdaConfig.PreSignUp)
		} else if a.ko.Spec.LambdaConfig.PreSignUp != nil && b.ko.Spec.LambdaConfig.PreSignUp != nil {
			if *a.ko.Spec.LambdaConfig.PreSignUp != *b.ko.Spec.LambdaConfig.PreSignUp {
				delta.Add("Spec.LambdaConfig.PreSignUp", a.ko.Spec.LambdaConfig.PreSignUp, b.ko.Spec.LambdaConfig.PreSignUp)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.LambdaConfig.PreTokenGeneration, b.ko.Spec.LambdaConfig.PreTokenGeneration) {
			delta.Add("Spec.LambdaConfig.PreTokenGeneration", a.ko.Spec.LambdaConfig.PreTokenGeneration, b.ko.Spec.LambdaConfig.PreTokenGeneration)
		} else if a.ko.Spec.LambdaConfig.PreTokenGeneration != nil && b.ko.Spec.LambdaConfig.PreTokenGeneration != nil {
			if *a.ko.Spec.LambdaConfig.PreTokenGeneration != *b.ko.Spec.LambdaConfig.PreTokenGeneration {
				delta.Add("Spec.LambdaConfig.PreTokenGeneration", a.ko.Spec.LambdaConfig.PreTokenGeneration, b.ko.Spec.LambdaConfig.PreTokenGeneration)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.LambdaConfig.PreTokenGenerationConfig, b.ko.Spec.LambdaConfig.PreTokenGenerationConfig) {
			delta.Add("Spec.LambdaConfig.PreTokenGenerationConfig", a.ko.Spec.LambdaConfig.PreTokenGenerationConfig, b.ko.Spec.LambdaConfig.PreTokenGenerationConfig)
		} else if a.ko.Spec.LambdaConfig.PreTokenGenerationConfig != nil && b.ko.Spec.LambdaConfig.PreTokenGenerationConfig != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.LambdaConfig.PreTokenGenerationConfig.LambdaARN, b.ko.Spec.LambdaConfig.PreTokenGenerationConfig.LambdaARN) {
				delta.Add("Spec.LambdaConfig.PreTokenGenerationConfig.LambdaARN", a.ko.Spec.LambdaConfig.PreTokenGenerationConfig.LambdaARN, b.ko.Spec.LambdaConfig.PreTokenGenerationConfig.LambdaARN)
			} else if a.ko.Spec.LambdaConfig.PreTokenGenerationConfig.LambdaARN != nil && b.ko.Spec.LambdaConfig.PreTokenGenerationConfig.LambdaARN != nil {
				if *a.ko.Spec.LambdaConfig.PreTokenGenerationConfig.LambdaARN != *b.ko.Spec.LambdaConfig.PreTokenGenerationConfig.LambdaARN {
					delta.Add("Spec.LambdaConfig.PreTokenGenerationConfig.LambdaARN", a.ko.Spec.LambdaConfig.PreTokenGenerationConfig.LambdaARN, b.ko.Spec.LambdaConfig.PreTokenGenerationConfig.LambdaARN)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.LambdaConfig.PreTokenGenerationConfig.LambdaVersion, b.ko.Spec.LambdaConfig.PreTokenGenerationConfig.LambdaVersion) {
				delta.Add("Spec.LambdaConfig.PreTokenGenerationConfig.LambdaVersion", a.ko.Spec.LambdaConfig.PreTokenGenerationConfig.LambdaVersion, b.ko.Spec.LambdaConfig.PreTokenGenerationConfig.LambdaVersion)
			} else if a.ko.Spec.LambdaConfig.PreTokenGenerationConfig.LambdaVersion != nil && b.ko.Spec.LambdaConfig.PreTokenGenerationConfig.LambdaVersion != nil {
				if *a.ko.Spec.LambdaConfig.PreTokenGenerationConfig.LambdaVersion != *b.ko.Spec.LambdaConfig.PreTokenGenerationConfig.LambdaVersion {
					delta.Add("Spec.LambdaConfig.PreTokenGenerationConfig.LambdaVersion", a.ko.Spec.LambdaConfig.PreTokenGenerationConfig.LambdaVersion, b.ko.Spec.LambdaConfig.PreTokenGenerationConfig.LambdaVersion)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.LambdaConfig.UserMigration, b.ko.Spec.LambdaConfig.UserMigration) {
			delta.Add("Spec.LambdaConfig.UserMigration", a.ko.Spec.LambdaConfig.UserMigration, b.ko.Spec.LambdaConfig.UserMigration)
		} else if a.ko.Spec.LambdaConfig.UserMigration != nil && b.ko.Spec.LambdaConfig.UserMigration != nil {
			if *a.ko.Spec.LambdaConfig.UserMigration != *b.ko.Spec.LambdaConfig.UserMigration {
				delta.Add("Spec.LambdaConfig.UserMigration", a.ko.Spec.LambdaConfig.UserMigration, b.ko.Spec.LambdaConfig.UserMigration)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.LambdaConfig.VerifyAuthChallengeResponse, b.ko.Spec.LambdaConfig.VerifyAuthChallengeResponse) {
			delta.Add("Spec.LambdaConfig.VerifyAuthChallengeResponse", a.ko.Spec.LambdaConfig.VerifyAuthChallengeResponse, b.ko.Spec.LambdaConfig.VerifyAuthChallengeResponse)
		} else if a.ko.Spec.LambdaConfig.VerifyAuthChallengeResponse != nil && b.ko.Spec.LambdaConfig.VerifyAuthChallengeResponse != nil {
			if *a.ko.Spec.LambdaConfig.VerifyAuthChallengeResponse != *b.ko.Spec.LambdaConfig.VerifyAuthChallengeResponse {
				delta.Add("Spec.LambdaConfig.VerifyAuthChallengeResponse", a.ko.Spec.LambdaConfig.VerifyAuthChallengeResponse, b.ko.Spec.LambdaConfig.VerifyAuthChallengeResponse)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.MFAConfiguration, b.ko.Spec.MFAConfiguration) {
		delta.Add("Spec.MFAConfiguration", a.ko.Spec.MFAConfiguration, b.ko.Spec.MFAConfiguration)
	} else if a.ko.Spec.MFAConfiguration != nil && b.ko.Spec.MFAConfiguration != nil {
		if *a.ko.Spec.MFAConfiguration != *b.ko.Spec.MFAConfiguration {
			delta.Add("Spec.MFAConfiguration", a.ko.Spec.MFAConfiguration, b.ko.Spec.MFAConfiguration)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Name, b.ko.Spec.Name) {
		delta.Add("Spec.Name", a.ko.Spec.Name, b.ko.Spec.Name)
	} else if a.ko.Spec.Name != nil && b.ko.Spec.Name != nil {
		if *a.ko.Spec.Name != *b.ko.Spec.Name {
			delta.Add("Spec.Name", a.ko.Spec.Name, b.ko.Spec.Name)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Policies, b.ko.Spec.Policies) {
		delta.Add("Spec.Policies", a.ko.Spec.Policies, b.ko.Spec.Policies)
	} else if a.ko.Spec.Policies != nil && b.ko.Spec.Policies != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.Policies.PasswordPolicy, b.ko.Spec.Policies.PasswordPolicy) {
			delta.Add("Spec.Policies.PasswordPolicy", a.ko.Spec.Policies.PasswordPolicy, b.ko.Spec.Policies.PasswordPolicy)
		} else if a.ko.Spec.Policies.PasswordPolicy != nil && b.ko.Spec.Policies.PasswordPolicy != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.Policies.PasswordPolicy.MinimumLength, b.ko.Spec.Policies.PasswordPolicy.MinimumLength) {
				delta.Add("Spec.Policies.PasswordPolicy.MinimumLength", a.ko.Spec.Policies.PasswordPolicy.MinimumLength, b.ko.Spec.Policies.PasswordPolicy.MinimumLength)
			} else if a.ko.Spec.Policies.PasswordPolicy.MinimumLength != nil && b.ko.Spec.Policies.PasswordPolicy.MinimumLength != nil {
				if *a.ko.Spec.Policies.PasswordPolicy.MinimumLength != *b.ko.Spec.Policies.PasswordPolicy.MinimumLength {
					delta.Add("Spec.Policies.PasswordPolicy.MinimumLength", a.ko.Spec.Policies.PasswordPolicy.MinimumLength, b.ko.Spec.Policies.PasswordPolicy.MinimumLength)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.Policies.PasswordPolicy.RequireLowercase, b.ko.Spec.Policies.PasswordPolicy.RequireLowercase) {
				delta.Add("Spec.Policies.PasswordPolicy.RequireLowercase", a.ko.Spec.Policies.PasswordPolicy.RequireLowercase, b.ko.Spec.Policies.PasswordPolicy.RequireLowercase)
			} else if a.ko.Spec.Policies.PasswordPolicy.RequireLowercase != nil && b.ko.Spec.Policies.PasswordPolicy.RequireLowercase != nil {
				if *a.ko.Spec.Policies.PasswordPolicy.RequireLowercase != *b.ko.Spec.Policies.PasswordPolicy.RequireLowercase {
					delta.Add("Spec.Policies.PasswordPolicy.RequireLowercase", a.ko.Spec.Policies.PasswordPolicy.RequireLowercase, b.ko.Spec.Policies.PasswordPolicy.RequireLowercase)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.Policies.PasswordPolicy.RequireNumbers, b.ko.Spec.Policies.PasswordPolicy.RequireNumbers) {
				delta.Add("Spec.Policies.PasswordPolicy.RequireNumbers", a.ko.Spec.Policies.PasswordPolicy.RequireNumbers, b.ko.Spec.Policies.PasswordPolicy.RequireNumbers)
			} else if a.ko.Spec.Policies.PasswordPolicy.RequireNumbers != nil && b.ko.Spec.Policies.PasswordPolicy.RequireNumbers != nil {
				if *a.ko.Spec.Policies.PasswordPolicy.RequireNumbers != *b.ko.Spec.Policies.PasswordPolicy.RequireNumbers {
					delta.Add("Spec.Policies.PasswordPolicy.RequireNumbers", a.ko.Spec.Policies.PasswordPolicy.RequireNumbers, b.ko.Spec.Policies.PasswordPolicy.RequireNumbers)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.Policies.PasswordPolicy.RequireSymbols, b.ko.Spec.Policies.PasswordPolicy.RequireSymbols) {
				delta.Add("Spec.Policies.PasswordPolicy.RequireSymbols", a.ko.Spec.Policies.PasswordPolicy.RequireSymbols, b.ko.Spec.Policies.PasswordPolicy.RequireSymbols)
			} else if a.ko.Spec.Policies.PasswordPolicy.RequireSymbols != nil && b.ko.Spec.Policies.PasswordPolicy.RequireSymbols != nil {
				if *a.ko.Spec.Policies.PasswordPolicy.RequireSymbols != *b.ko.Spec.Policies.PasswordPolicy.RequireSymbols {
					delta.Add("Spec.Policies.PasswordPolicy.RequireSymbols", a.ko.Spec.Policies.PasswordPolicy.RequireSymbols, b.ko.Spec.Policies.PasswordPolicy.RequireSymbols)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.Policies.PasswordPolicy.RequireUppercase, b.ko.Spec.Policies.PasswordPolicy.RequireUppercase) {
				delta.Add("Spec.Policies.PasswordPolicy.RequireUppercase", a.ko.Spec.Policies.PasswordPolicy.RequireUppercase, b.ko.Spec.Policies.PasswordPolicy.RequireUppercase)
			} else if a.ko.Spec.Policies.PasswordPolicy.RequireUppercase != nil && b.ko.Spec.Policies.PasswordPolicy.RequireUppercase != nil {
				if *a.ko.Spec.Policies.PasswordPolicy.RequireUppercase != *b.ko.Spec.Policies.PasswordPolicy.RequireUppercase {
					delta.Add("Spec.Policies.PasswordPolicy.RequireUppercase", a.ko.Spec.Policies.PasswordPolicy.RequireUppercase, b.ko.Spec.Policies.PasswordPolicy.RequireUppercase)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.Policies.PasswordPolicy.TemporaryPasswordValidityDays, b.ko.Spec.Policies.PasswordPolicy.TemporaryPasswordValidityDays) {
				delta.Add("Spec.Policies.PasswordPolicy.TemporaryPasswordValidityDays", a.ko.Spec.Policies.PasswordPolicy.TemporaryPasswordValidityDays, b.ko.Spec.Policies.PasswordPolicy.TemporaryPasswordValidityDays)
			} else if a.ko.Spec.Policies.PasswordPolicy.TemporaryPasswordValidityDays != nil && b.ko.Spec.Policies.PasswordPolicy.TemporaryPasswordValidityDays != nil {
				if *a.ko.Spec.Policies.PasswordPolicy.TemporaryPasswordValidityDays != *b.ko.Spec.Policies.PasswordPolicy.TemporaryPasswordValidityDays {
					delta.Add("Spec.Policies.PasswordPolicy.TemporaryPasswordValidityDays", a.ko.Spec.Policies.PasswordPolicy.TemporaryPasswordValidityDays, b.ko.Spec.Policies.PasswordPolicy.TemporaryPasswordValidityDays)
				}
			}
		}
	}
	if len(a.ko.Spec.Schema) != len(b.ko.Spec.Schema) {
		delta.Add("Spec.Schema", a.ko.Spec.Schema, b.ko.Spec.Schema)
	} else if len(a.ko.Spec.Schema) > 0 {
		if !reflect.DeepEqual(a.ko.Spec.Schema, b.ko.Spec.Schema) {
			delta.Add("Spec.Schema", a.ko.Spec.Schema, b.ko.Spec.Schema)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.SmsAuthenticationMessage, b.ko.Spec.SmsAuthenticationMessage) {
		delta.Add("Spec.SmsAuthenticationMessage", a.ko.Spec.SmsAuthenticationMessage, b.ko.Spec.SmsAuthenticationMessage)
	} else if a.ko.Spec.SmsAuthenticationMessage != nil && b.ko.Spec.SmsAuthenticationMessage != nil {
		if *a.ko.Spec.SmsAuthenticationMessage != *b.ko.Spec.SmsAuthenticationMessage {
			delta.Add("Spec.SmsAuthenticationMessage", a.ko.Spec.SmsAuthenticationMessage, b.ko.Spec.SmsAuthenticationMessage)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.SmsConfiguration, b.ko.Spec.SmsConfiguration) {
		delta.Add("Spec.SmsConfiguration", a.ko.Spec.SmsConfiguration, b.ko.Spec.SmsConfiguration)
	} else if a.ko.Spec.SmsConfiguration != nil && b.ko.Spec.SmsConfiguration != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.SmsConfiguration.ExternalID, b.ko.Spec.SmsConfiguration.ExternalID) {
			delta.Add("Spec.SmsConfiguration.ExternalID", a.ko.Spec.SmsConfiguration.ExternalID, b.ko.Spec.SmsConfiguration.ExternalID)
		} else if a.ko.Spec.SmsConfiguration.ExternalID != nil && b.ko.Spec.SmsConfiguration.ExternalID != nil {
			if *a.ko.Spec.SmsConfiguration.ExternalID != *b.ko.Spec.SmsConfiguration.ExternalID {
				delta.Add("Spec.SmsConfiguration.ExternalID", a.ko.Spec.SmsConfiguration.ExternalID, b.ko.Spec.SmsConfiguration.ExternalID)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.SmsConfiguration.SNSCallerARN, b.ko.Spec.SmsConfiguration.SNSCallerARN) {
			delta.Add("Spec.SmsConfiguration.SNSCallerARN", a.ko.Spec.SmsConfiguration.SNSCallerARN, b.ko.Spec.SmsConfiguration.SNSCallerARN)
		} else if a.ko.Spec.SmsConfiguration.SNSCallerARN != nil && b.ko.Spec.SmsConfiguration.SNSCallerARN != nil {
			if *a.ko.Spec.SmsConfiguration.SNSCallerARN != *b.ko.Spec.SmsConfiguration.SNSCallerARN {
				delta.Add("Spec.SmsConfiguration.SNSCallerARN", a.ko.Spec.SmsConfiguration.SNSCallerARN, b.ko.Spec.SmsConfiguration.SNSCallerARN)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.SmsConfiguration.SNSRegion, b.ko.Spec.SmsConfiguration.SNSRegion) {
			delta.Add("Spec.SmsConfiguration.SNSRegion", a.ko.Spec.SmsConfiguration.SNSRegion, b.ko.Spec.SmsConfiguration.SNSRegion)
		} else if a.ko.Spec.SmsConfiguration.SNSRegion != nil && b.ko.Spec.SmsConfiguration.SNSRegion != nil {
			if *a.ko.Spec.SmsConfiguration.SNSRegion != *b.ko.Spec.SmsConfiguration.SNSRegion {
				delta.Add("Spec.SmsConfiguration.SNSRegion", a.ko.Spec.SmsConfiguration.SNSRegion, b.ko.Spec.SmsConfiguration.SNSRegion)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.SmsVerificationMessage, b.ko.Spec.SmsVerificationMessage) {
		delta.Add("Spec.SmsVerificationMessage", a.ko.Spec.SmsVerificationMessage, b.ko.Spec.SmsVerificationMessage)
	} else if a.ko.Spec.SmsVerificationMessage != nil && b.ko.Spec.SmsVerificationMessage != nil {
		if *a.ko.Spec.SmsVerificationMessage != *b.ko.Spec.SmsVerificationMessage {
			delta.Add("Spec.SmsVerificationMessage", a.ko.Spec.SmsVerificationMessage, b.ko.Spec.SmsVerificationMessage)
		}
	}
	desiredACKTags, _ := convertToOrderedACKTags(a.ko.Spec.Tags)
	latestACKTags, _ := convertToOrderedACKTags(b.ko.Spec.Tags)
	if !ackcompare.MapStringStringEqual(desiredACKTags, latestACKTags) {
		delta.Add("Spec.Tags", a.ko.Spec.Tags, b.ko.Spec.Tags)
	}
	if ackcompare.HasNilDifference(a.ko.Spec.UserAttributeUpdateSettings, b.ko.Spec.UserAttributeUpdateSettings) {
		delta.Add("Spec.UserAttributeUpdateSettings", a.ko.Spec.UserAttributeUpdateSettings, b.ko.Spec.UserAttributeUpdateSettings)
	} else if a.ko.Spec.UserAttributeUpdateSettings != nil && b.ko.Spec.UserAttributeUpdateSettings != nil {
		if len(a.ko.Spec.UserAttributeUpdateSettings.AttributesRequireVerificationBeforeUpdate) != len(b.ko.Spec.UserAttributeUpdateSettings.AttributesRequireVerificationBeforeUpdate) {
			delta.Add("Spec.UserAttributeUpdateSettings.AttributesRequireVerificationBeforeUpdate", a.ko.Spec.UserAttributeUpdateSettings.AttributesRequireVerificationBeforeUpdate, b.ko.Spec.UserAttributeUpdateSettings.AttributesRequireVerificationBeforeUpdate)
		} else if len(a.ko.Spec.UserAttributeUpdateSettings.AttributesRequireVerificationBeforeUpdate) > 0 {
			if !ackcompare.SliceStringPEqual(a.ko.Spec.UserAttributeUpdateSettings.AttributesRequireVerificationBeforeUpdate, b.ko.Spec.UserAttributeUpdateSettings.AttributesRequireVerificationBeforeUpdate) {
				delta.Add("Spec.UserAttributeUpdateSettings.AttributesRequireVerificationBeforeUpdate", a.ko.Spec.UserAttributeUpdateSettings.AttributesRequireVerificationBeforeUpdate, b.ko.Spec.UserAttributeUpdateSettings.AttributesRequireVerificationBeforeUpdate)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.UserPoolAddOns, b.ko.Spec.UserPoolAddOns) {
		delta.Add("Spec.UserPoolAddOns", a.ko.Spec.UserPoolAddOns, b.ko.Spec.UserPoolAddOns)
	} else if a.ko.Spec.UserPoolAddOns != nil && b.ko.Spec.UserPoolAddOns != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.UserPoolAddOns.AdvancedSecurityMode, b.ko.Spec.UserPoolAddOns.AdvancedSecurityMode) {
			delta.Add("Spec.UserPoolAddOns.AdvancedSecurityMode", a.ko.Spec.UserPoolAddOns.AdvancedSecurityMode, b.ko.Spec.UserPoolAddOns.AdvancedSecurityMode)
		} else if a.ko.Spec.UserPoolAddOns.AdvancedSecurityMode != nil && b.ko.Spec.UserPoolAddOns.AdvancedSecurityMode != nil {
			if *a.ko.Spec.UserPoolAddOns.AdvancedSecurityMode != *b.ko.Spec.UserPoolAddOns.AdvancedSecurityMode {
				delta.Add("Spec.UserPoolAddOns.AdvancedSecurityMode", a.ko.Spec.UserPoolAddOns.AdvancedSecurityMode, b.ko.Spec.UserPoolAddOns.AdvancedSecurityMode)
			}
		}
	}
	if len(a.ko.Spec.UserPoolTags) != len(b.ko.Spec.UserPoolTags) {
		delta.Add("Spec.UserPoolTags", a.ko.Spec.UserPoolTags, b.ko.Spec.UserPoolTags)
	} else if len(a.ko.Spec.UserPoolTags) > 0 {
		if !ackcompare.MapStringStringPEqual(a.ko.Spec.UserPoolTags, b.ko.Spec.UserPoolTags) {
			delta.Add("Spec.UserPoolTags", a.ko.Spec.UserPoolTags, b.ko.Spec.UserPoolTags)
		}
	}
	if len(a.ko.Spec.UsernameAttributes) != len(b.ko.Spec.UsernameAttributes) {
		delta.Add("Spec.UsernameAttributes", a.ko.Spec.UsernameAttributes, b.ko.Spec.UsernameAttributes)
	} else if len(a.ko.Spec.UsernameAttributes) > 0 {
		if !ackcompare.SliceStringPEqual(a.ko.Spec.UsernameAttributes, b.ko.Spec.UsernameAttributes) {
			delta.Add("Spec.UsernameAttributes", a.ko.Spec.UsernameAttributes, b.ko.Spec.UsernameAttributes)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.UsernameConfiguration, b.ko.Spec.UsernameConfiguration) {
		delta.Add("Spec.UsernameConfiguration", a.ko.Spec.UsernameConfiguration, b.ko.Spec.UsernameConfiguration)
	} else if a.ko.Spec.UsernameConfiguration != nil && b.ko.Spec.UsernameConfiguration != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.UsernameConfiguration.CaseSensitive, b.ko.Spec.UsernameConfiguration.CaseSensitive) {
			delta.Add("Spec.UsernameConfiguration.CaseSensitive", a.ko.Spec.UsernameConfiguration.CaseSensitive, b.ko.Spec.UsernameConfiguration.CaseSensitive)
		} else if a.ko.Spec.UsernameConfiguration.CaseSensitive != nil && b.ko.Spec.UsernameConfiguration.CaseSensitive != nil {
			if *a.ko.Spec.UsernameConfiguration.CaseSensitive != *b.ko.Spec.UsernameConfiguration.CaseSensitive {
				delta.Add("Spec.UsernameConfiguration.CaseSensitive", a.ko.Spec.UsernameConfiguration.CaseSensitive, b.ko.Spec.UsernameConfiguration.CaseSensitive)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.VerificationMessageTemplate, b.ko.Spec.VerificationMessageTemplate) {
		delta.Add("Spec.VerificationMessageTemplate", a.ko.Spec.VerificationMessageTemplate, b.ko.Spec.VerificationMessageTemplate)
	} else if a.ko.Spec.VerificationMessageTemplate != nil && b.ko.Spec.VerificationMessageTemplate != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.VerificationMessageTemplate.DefaultEmailOption, b.ko.Spec.VerificationMessageTemplate.DefaultEmailOption) {
			delta.Add("Spec.VerificationMessageTemplate.DefaultEmailOption", a.ko.Spec.VerificationMessageTemplate.DefaultEmailOption, b.ko.Spec.VerificationMessageTemplate.DefaultEmailOption)
		} else if a.ko.Spec.VerificationMessageTemplate.DefaultEmailOption != nil && b.ko.Spec.VerificationMessageTemplate.DefaultEmailOption != nil {
			if *a.ko.Spec.VerificationMessageTemplate.DefaultEmailOption != *b.ko.Spec.VerificationMessageTemplate.DefaultEmailOption {
				delta.Add("Spec.VerificationMessageTemplate.DefaultEmailOption", a.ko.Spec.VerificationMessageTemplate.DefaultEmailOption, b.ko.Spec.VerificationMessageTemplate.DefaultEmailOption)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.VerificationMessageTemplate.EmailMessage, b.ko.Spec.VerificationMessageTemplate.EmailMessage) {
			delta.Add("Spec.VerificationMessageTemplate.EmailMessage", a.ko.Spec.VerificationMessageTemplate.EmailMessage, b.ko.Spec.VerificationMessageTemplate.EmailMessage)
		} else if a.ko.Spec.VerificationMessageTemplate.EmailMessage != nil && b.ko.Spec.VerificationMessageTemplate.EmailMessage != nil {
			if *a.ko.Spec.VerificationMessageTemplate.EmailMessage != *b.ko.Spec.VerificationMessageTemplate.EmailMessage {
				delta.Add("Spec.VerificationMessageTemplate.EmailMessage", a.ko.Spec.VerificationMessageTemplate.EmailMessage, b.ko.Spec.VerificationMessageTemplate.EmailMessage)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.VerificationMessageTemplate.EmailMessageByLink, b.ko.Spec.VerificationMessageTemplate.EmailMessageByLink) {
			delta.Add("Spec.VerificationMessageTemplate.EmailMessageByLink", a.ko.Spec.VerificationMessageTemplate.EmailMessageByLink, b.ko.Spec.VerificationMessageTemplate.EmailMessageByLink)
		} else if a.ko.Spec.VerificationMessageTemplate.EmailMessageByLink != nil && b.ko.Spec.VerificationMessageTemplate.EmailMessageByLink != nil {
			if *a.ko.Spec.VerificationMessageTemplate.EmailMessageByLink != *b.ko.Spec.VerificationMessageTemplate.EmailMessageByLink {
				delta.Add("Spec.VerificationMessageTemplate.EmailMessageByLink", a.ko.Spec.VerificationMessageTemplate.EmailMessageByLink, b.ko.Spec.VerificationMessageTemplate.EmailMessageByLink)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.VerificationMessageTemplate.EmailSubject, b.ko.Spec.VerificationMessageTemplate.EmailSubject) {
			delta.Add("Spec.VerificationMessageTemplate.EmailSubject", a.ko.Spec.VerificationMessageTemplate.EmailSubject, b.ko.Spec.VerificationMessageTemplate.EmailSubject)
		} else if a.ko.Spec.VerificationMessageTemplate.EmailSubject != nil && b.ko.Spec.VerificationMessageTemplate.EmailSubject != nil {
			if *a.ko.Spec.VerificationMessageTemplate.EmailSubject != *b.ko.Spec.VerificationMessageTemplate.EmailSubject {
				delta.Add("Spec.VerificationMessageTemplate.EmailSubject", a.ko.Spec.VerificationMessageTemplate.EmailSubject, b.ko.Spec.VerificationMessageTemplate.EmailSubject)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.VerificationMessageTemplate.EmailSubjectByLink, b.ko.Spec.VerificationMessageTemplate.EmailSubjectByLink) {
			delta.Add("Spec.VerificationMessageTemplate.EmailSubjectByLink", a.ko.Spec.VerificationMessageTemplate.EmailSubjectByLink, b.ko.Spec.VerificationMessageTemplate.EmailSubjectByLink)
		} else if a.ko.Spec.VerificationMessageTemplate.EmailSubjectByLink != nil && b.ko.Spec.VerificationMessageTemplate.EmailSubjectByLink != nil {
			if *a.ko.Spec.VerificationMessageTemplate.EmailSubjectByLink != *b.ko.Spec.VerificationMessageTemplate.EmailSubjectByLink {
				delta.Add("Spec.VerificationMessageTemplate.EmailSubjectByLink", a.ko.Spec.VerificationMessageTemplate.EmailSubjectByLink, b.ko.Spec.VerificationMessageTemplate.EmailSubjectByLink)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.VerificationMessageTemplate.SmsMessage, b.ko.Spec.VerificationMessageTemplate.SmsMessage) {
			delta.Add("Spec.VerificationMessageTemplate.SmsMessage", a.ko.Spec.VerificationMessageTemplate.SmsMessage, b.ko.Spec.VerificationMessageTemplate.SmsMessage)
		} else if a.ko.Spec.VerificationMessageTemplate.SmsMessage != nil && b.ko.Spec.VerificationMessageTemplate.SmsMessage != nil {
			if *a.ko.Spec.VerificationMessageTemplate.SmsMessage != *b.ko.Spec.VerificationMessageTemplate.SmsMessage {
				delta.Add("Spec.VerificationMessageTemplate.SmsMessage", a.ko.Spec.VerificationMessageTemplate.SmsMessage, b.ko.Spec.VerificationMessageTemplate.SmsMessage)
			}
		}
	}

	return delta
}
