// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package user_pool

import (
	"context"
	"errors"
	"fmt"
	"math"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go-v2/aws"
	svcsdk "github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider"
	svcsdktypes "github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider/types"
	smithy "github.com/aws/smithy-go"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/cognitoidentityprovider-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &svcsdk.Client{}
	_ = &svcapitypes.UserPool{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
	_ = &aws.Config{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.DescribeUserPoolOutput
	resp, err = rm.sdkapi.DescribeUserPool(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "DescribeUserPool", err)
	if err != nil {
		var awsErr smithy.APIError
		if errors.As(err, &awsErr) && awsErr.ErrorCode() == "ResourceNotFoundException" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.UserPool.AccountRecoverySetting != nil {
		f0 := &svcapitypes.AccountRecoverySettingType{}
		if resp.UserPool.AccountRecoverySetting.RecoveryMechanisms != nil {
			f0f0 := []*svcapitypes.RecoveryOptionType{}
			for _, f0f0iter := range resp.UserPool.AccountRecoverySetting.RecoveryMechanisms {
				f0f0elem := &svcapitypes.RecoveryOptionType{}
				if f0f0iter.Name != "" {
					f0f0elem.Name = aws.String(string(f0f0iter.Name))
				}
				if f0f0iter.Priority != nil {
					priorityCopy := int64(*f0f0iter.Priority)
					f0f0elem.Priority = &priorityCopy
				}
				f0f0 = append(f0f0, f0f0elem)
			}
			f0.RecoveryMechanisms = f0f0
		}
		ko.Spec.AccountRecoverySetting = f0
	} else {
		ko.Spec.AccountRecoverySetting = nil
	}
	if resp.UserPool.AdminCreateUserConfig != nil {
		f1 := &svcapitypes.AdminCreateUserConfigType{}
		f1.AllowAdminCreateUserOnly = &resp.UserPool.AdminCreateUserConfig.AllowAdminCreateUserOnly
		if resp.UserPool.AdminCreateUserConfig.InviteMessageTemplate != nil {
			f1f1 := &svcapitypes.MessageTemplateType{}
			if resp.UserPool.AdminCreateUserConfig.InviteMessageTemplate.EmailMessage != nil {
				f1f1.EmailMessage = resp.UserPool.AdminCreateUserConfig.InviteMessageTemplate.EmailMessage
			}
			if resp.UserPool.AdminCreateUserConfig.InviteMessageTemplate.EmailSubject != nil {
				f1f1.EmailSubject = resp.UserPool.AdminCreateUserConfig.InviteMessageTemplate.EmailSubject
			}
			if resp.UserPool.AdminCreateUserConfig.InviteMessageTemplate.SMSMessage != nil {
				f1f1.SMSMessage = resp.UserPool.AdminCreateUserConfig.InviteMessageTemplate.SMSMessage
			}
			f1.InviteMessageTemplate = f1f1
		}
		unusedAccountValidityDaysCopy := int64(resp.UserPool.AdminCreateUserConfig.UnusedAccountValidityDays)
		f1.UnusedAccountValidityDays = &unusedAccountValidityDaysCopy
		ko.Spec.AdminCreateUserConfig = f1
	} else {
		ko.Spec.AdminCreateUserConfig = nil
	}
	if resp.UserPool.AliasAttributes != nil {
		f2 := []*string{}
		for _, f2iter := range resp.UserPool.AliasAttributes {
			var f2elem *string
			f2elem = aws.String(string(f2iter))
			f2 = append(f2, f2elem)
		}
		ko.Spec.AliasAttributes = f2
	} else {
		ko.Spec.AliasAttributes = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.UserPool.Arn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.UserPool.Arn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.UserPool.AutoVerifiedAttributes != nil {
		f4 := []*string{}
		for _, f4iter := range resp.UserPool.AutoVerifiedAttributes {
			var f4elem *string
			f4elem = aws.String(string(f4iter))
			f4 = append(f4, f4elem)
		}
		ko.Spec.AutoVerifiedAttributes = f4
	} else {
		ko.Spec.AutoVerifiedAttributes = nil
	}
	if resp.UserPool.CreationDate != nil {
		ko.Status.CreationDate = &metav1.Time{*resp.UserPool.CreationDate}
	} else {
		ko.Status.CreationDate = nil
	}
	if resp.UserPool.CustomDomain != nil {
		ko.Status.CustomDomain = resp.UserPool.CustomDomain
	} else {
		ko.Status.CustomDomain = nil
	}
	if resp.UserPool.DeletionProtection != "" {
		ko.Spec.DeletionProtection = aws.String(string(resp.UserPool.DeletionProtection))
	} else {
		ko.Spec.DeletionProtection = nil
	}
	if resp.UserPool.DeviceConfiguration != nil {
		f8 := &svcapitypes.DeviceConfigurationType{}
		f8.ChallengeRequiredOnNewDevice = &resp.UserPool.DeviceConfiguration.ChallengeRequiredOnNewDevice
		f8.DeviceOnlyRememberedOnUserPrompt = &resp.UserPool.DeviceConfiguration.DeviceOnlyRememberedOnUserPrompt
		ko.Spec.DeviceConfiguration = f8
	} else {
		ko.Spec.DeviceConfiguration = nil
	}
	if resp.UserPool.Domain != nil {
		ko.Status.Domain = resp.UserPool.Domain
	} else {
		ko.Status.Domain = nil
	}
	if resp.UserPool.EmailConfiguration != nil {
		f10 := &svcapitypes.EmailConfigurationType{}
		if resp.UserPool.EmailConfiguration.ConfigurationSet != nil {
			f10.ConfigurationSet = resp.UserPool.EmailConfiguration.ConfigurationSet
		}
		if resp.UserPool.EmailConfiguration.EmailSendingAccount != "" {
			f10.EmailSendingAccount = aws.String(string(resp.UserPool.EmailConfiguration.EmailSendingAccount))
		}
		if resp.UserPool.EmailConfiguration.From != nil {
			f10.From = resp.UserPool.EmailConfiguration.From
		}
		if resp.UserPool.EmailConfiguration.ReplyToEmailAddress != nil {
			f10.ReplyToEmailAddress = resp.UserPool.EmailConfiguration.ReplyToEmailAddress
		}
		if resp.UserPool.EmailConfiguration.SourceArn != nil {
			f10.SourceARN = resp.UserPool.EmailConfiguration.SourceArn
		}
		ko.Spec.EmailConfiguration = f10
	} else {
		ko.Spec.EmailConfiguration = nil
	}
	if resp.UserPool.EmailConfigurationFailure != nil {
		ko.Status.EmailConfigurationFailure = resp.UserPool.EmailConfigurationFailure
	} else {
		ko.Status.EmailConfigurationFailure = nil
	}
	if resp.UserPool.EmailVerificationMessage != nil {
		ko.Spec.EmailVerificationMessage = resp.UserPool.EmailVerificationMessage
	} else {
		ko.Spec.EmailVerificationMessage = nil
	}
	if resp.UserPool.EmailVerificationSubject != nil {
		ko.Spec.EmailVerificationSubject = resp.UserPool.EmailVerificationSubject
	} else {
		ko.Spec.EmailVerificationSubject = nil
	}
	estimatedNumberOfUsersCopy := int64(resp.UserPool.EstimatedNumberOfUsers)
	ko.Status.EstimatedNumberOfUsers = &estimatedNumberOfUsersCopy
	if resp.UserPool.Id != nil {
		ko.Status.ID = resp.UserPool.Id
	} else {
		ko.Status.ID = nil
	}
	if resp.UserPool.LambdaConfig != nil {
		f16 := &svcapitypes.LambdaConfigType{}
		if resp.UserPool.LambdaConfig.CreateAuthChallenge != nil {
			f16.CreateAuthChallenge = resp.UserPool.LambdaConfig.CreateAuthChallenge
		}
		if resp.UserPool.LambdaConfig.CustomEmailSender != nil {
			f16f1 := &svcapitypes.CustomEmailLambdaVersionConfigType{}
			if resp.UserPool.LambdaConfig.CustomEmailSender.LambdaArn != nil {
				f16f1.LambdaARN = resp.UserPool.LambdaConfig.CustomEmailSender.LambdaArn
			}
			if resp.UserPool.LambdaConfig.CustomEmailSender.LambdaVersion != "" {
				f16f1.LambdaVersion = aws.String(string(resp.UserPool.LambdaConfig.CustomEmailSender.LambdaVersion))
			}
			f16.CustomEmailSender = f16f1
		}
		if resp.UserPool.LambdaConfig.CustomMessage != nil {
			f16.CustomMessage = resp.UserPool.LambdaConfig.CustomMessage
		}
		if resp.UserPool.LambdaConfig.CustomSMSSender != nil {
			f16f3 := &svcapitypes.CustomSMSLambdaVersionConfigType{}
			if resp.UserPool.LambdaConfig.CustomSMSSender.LambdaArn != nil {
				f16f3.LambdaARN = resp.UserPool.LambdaConfig.CustomSMSSender.LambdaArn
			}
			if resp.UserPool.LambdaConfig.CustomSMSSender.LambdaVersion != "" {
				f16f3.LambdaVersion = aws.String(string(resp.UserPool.LambdaConfig.CustomSMSSender.LambdaVersion))
			}
			f16.CustomSMSSender = f16f3
		}
		if resp.UserPool.LambdaConfig.DefineAuthChallenge != nil {
			f16.DefineAuthChallenge = resp.UserPool.LambdaConfig.DefineAuthChallenge
		}
		if resp.UserPool.LambdaConfig.KMSKeyID != nil {
			f16.KMSKeyID = resp.UserPool.LambdaConfig.KMSKeyID
		}
		if resp.UserPool.LambdaConfig.PostAuthentication != nil {
			f16.PostAuthentication = resp.UserPool.LambdaConfig.PostAuthentication
		}
		if resp.UserPool.LambdaConfig.PostConfirmation != nil {
			f16.PostConfirmation = resp.UserPool.LambdaConfig.PostConfirmation
		}
		if resp.UserPool.LambdaConfig.PreAuthentication != nil {
			f16.PreAuthentication = resp.UserPool.LambdaConfig.PreAuthentication
		}
		if resp.UserPool.LambdaConfig.PreSignUp != nil {
			f16.PreSignUp = resp.UserPool.LambdaConfig.PreSignUp
		}
		if resp.UserPool.LambdaConfig.PreTokenGeneration != nil {
			f16.PreTokenGeneration = resp.UserPool.LambdaConfig.PreTokenGeneration
		}
		if resp.UserPool.LambdaConfig.PreTokenGenerationConfig != nil {
			f16f11 := &svcapitypes.PreTokenGenerationVersionConfigType{}
			if resp.UserPool.LambdaConfig.PreTokenGenerationConfig.LambdaArn != nil {
				f16f11.LambdaARN = resp.UserPool.LambdaConfig.PreTokenGenerationConfig.LambdaArn
			}
			if resp.UserPool.LambdaConfig.PreTokenGenerationConfig.LambdaVersion != "" {
				f16f11.LambdaVersion = aws.String(string(resp.UserPool.LambdaConfig.PreTokenGenerationConfig.LambdaVersion))
			}
			f16.PreTokenGenerationConfig = f16f11
		}
		if resp.UserPool.LambdaConfig.UserMigration != nil {
			f16.UserMigration = resp.UserPool.LambdaConfig.UserMigration
		}
		if resp.UserPool.LambdaConfig.VerifyAuthChallengeResponse != nil {
			f16.VerifyAuthChallengeResponse = resp.UserPool.LambdaConfig.VerifyAuthChallengeResponse
		}
		ko.Spec.LambdaConfig = f16
	} else {
		ko.Spec.LambdaConfig = nil
	}
	if resp.UserPool.LastModifiedDate != nil {
		ko.Status.LastModifiedDate = &metav1.Time{*resp.UserPool.LastModifiedDate}
	} else {
		ko.Status.LastModifiedDate = nil
	}
	if resp.UserPool.MfaConfiguration != "" {
		ko.Spec.MFAConfiguration = aws.String(string(resp.UserPool.MfaConfiguration))
	} else {
		ko.Spec.MFAConfiguration = nil
	}
	if resp.UserPool.Name != nil {
		ko.Spec.Name = resp.UserPool.Name
	} else {
		ko.Spec.Name = nil
	}
	if resp.UserPool.Policies != nil {
		f20 := &svcapitypes.UserPoolPolicyType{}
		if resp.UserPool.Policies.PasswordPolicy != nil {
			f20f0 := &svcapitypes.PasswordPolicyType{}
			if resp.UserPool.Policies.PasswordPolicy.MinimumLength != nil {
				minimumLengthCopy := int64(*resp.UserPool.Policies.PasswordPolicy.MinimumLength)
				f20f0.MinimumLength = &minimumLengthCopy
			}
			f20f0.RequireLowercase = &resp.UserPool.Policies.PasswordPolicy.RequireLowercase
			f20f0.RequireNumbers = &resp.UserPool.Policies.PasswordPolicy.RequireNumbers
			f20f0.RequireSymbols = &resp.UserPool.Policies.PasswordPolicy.RequireSymbols
			f20f0.RequireUppercase = &resp.UserPool.Policies.PasswordPolicy.RequireUppercase
			temporaryPasswordValidityDaysCopy := int64(resp.UserPool.Policies.PasswordPolicy.TemporaryPasswordValidityDays)
			f20f0.TemporaryPasswordValidityDays = &temporaryPasswordValidityDaysCopy
			f20.PasswordPolicy = f20f0
		}
		ko.Spec.Policies = f20
	} else {
		ko.Spec.Policies = nil
	}
	if resp.UserPool.SchemaAttributes != nil {
		f21 := []*svcapitypes.SchemaAttributeType{}
		for _, f21iter := range resp.UserPool.SchemaAttributes {
			f21elem := &svcapitypes.SchemaAttributeType{}
			if f21iter.AttributeDataType != "" {
				f21elem.AttributeDataType = aws.String(string(f21iter.AttributeDataType))
			}
			if f21iter.DeveloperOnlyAttribute != nil {
				f21elem.DeveloperOnlyAttribute = f21iter.DeveloperOnlyAttribute
			}
			if f21iter.Mutable != nil {
				f21elem.Mutable = f21iter.Mutable
			}
			if f21iter.Name != nil {
				f21elem.Name = f21iter.Name
			}
			if f21iter.NumberAttributeConstraints != nil {
				f21elemf4 := &svcapitypes.NumberAttributeConstraintsType{}
				if f21iter.NumberAttributeConstraints.MaxValue != nil {
					f21elemf4.MaxValue = f21iter.NumberAttributeConstraints.MaxValue
				}
				if f21iter.NumberAttributeConstraints.MinValue != nil {
					f21elemf4.MinValue = f21iter.NumberAttributeConstraints.MinValue
				}
				f21elem.NumberAttributeConstraints = f21elemf4
			}
			if f21iter.Required != nil {
				f21elem.Required = f21iter.Required
			}
			if f21iter.StringAttributeConstraints != nil {
				f21elemf6 := &svcapitypes.StringAttributeConstraintsType{}
				if f21iter.StringAttributeConstraints.MaxLength != nil {
					f21elemf6.MaxLength = f21iter.StringAttributeConstraints.MaxLength
				}
				if f21iter.StringAttributeConstraints.MinLength != nil {
					f21elemf6.MinLength = f21iter.StringAttributeConstraints.MinLength
				}
				f21elem.StringAttributeConstraints = f21elemf6
			}
			f21 = append(f21, f21elem)
		}
		ko.Status.SchemaAttributes = f21
	} else {
		ko.Status.SchemaAttributes = nil
	}
	if resp.UserPool.SmsAuthenticationMessage != nil {
		ko.Spec.SmsAuthenticationMessage = resp.UserPool.SmsAuthenticationMessage
	} else {
		ko.Spec.SmsAuthenticationMessage = nil
	}
	if resp.UserPool.SmsConfiguration != nil {
		f23 := &svcapitypes.SmsConfigurationType{}
		if resp.UserPool.SmsConfiguration.ExternalId != nil {
			f23.ExternalID = resp.UserPool.SmsConfiguration.ExternalId
		}
		if resp.UserPool.SmsConfiguration.SnsCallerArn != nil {
			f23.SNSCallerARN = resp.UserPool.SmsConfiguration.SnsCallerArn
		}
		if resp.UserPool.SmsConfiguration.SnsRegion != nil {
			f23.SNSRegion = resp.UserPool.SmsConfiguration.SnsRegion
		}
		ko.Spec.SmsConfiguration = f23
	} else {
		ko.Spec.SmsConfiguration = nil
	}
	if resp.UserPool.SmsConfigurationFailure != nil {
		ko.Status.SmsConfigurationFailure = resp.UserPool.SmsConfigurationFailure
	} else {
		ko.Status.SmsConfigurationFailure = nil
	}
	if resp.UserPool.SmsVerificationMessage != nil {
		ko.Spec.SmsVerificationMessage = resp.UserPool.SmsVerificationMessage
	} else {
		ko.Spec.SmsVerificationMessage = nil
	}
	if resp.UserPool.Status != "" {
		ko.Status.Status = aws.String(string(resp.UserPool.Status))
	} else {
		ko.Status.Status = nil
	}
	if resp.UserPool.UserAttributeUpdateSettings != nil {
		f27 := &svcapitypes.UserAttributeUpdateSettingsType{}
		if resp.UserPool.UserAttributeUpdateSettings.AttributesRequireVerificationBeforeUpdate != nil {
			f27f0 := []*string{}
			for _, f27f0iter := range resp.UserPool.UserAttributeUpdateSettings.AttributesRequireVerificationBeforeUpdate {
				var f27f0elem *string
				f27f0elem = aws.String(string(f27f0iter))
				f27f0 = append(f27f0, f27f0elem)
			}
			f27.AttributesRequireVerificationBeforeUpdate = f27f0
		}
		ko.Spec.UserAttributeUpdateSettings = f27
	} else {
		ko.Spec.UserAttributeUpdateSettings = nil
	}
	if resp.UserPool.UserPoolAddOns != nil {
		f28 := &svcapitypes.UserPoolAddOnsType{}
		if resp.UserPool.UserPoolAddOns.AdvancedSecurityMode != "" {
			f28.AdvancedSecurityMode = aws.String(string(resp.UserPool.UserPoolAddOns.AdvancedSecurityMode))
		}
		ko.Spec.UserPoolAddOns = f28
	} else {
		ko.Spec.UserPoolAddOns = nil
	}
	if resp.UserPool.UserPoolTags != nil {
		ko.Spec.UserPoolTags = aws.StringMap(resp.UserPool.UserPoolTags)
	} else {
		ko.Spec.UserPoolTags = nil
	}
	if resp.UserPool.UsernameAttributes != nil {
		f30 := []*string{}
		for _, f30iter := range resp.UserPool.UsernameAttributes {
			var f30elem *string
			f30elem = aws.String(string(f30iter))
			f30 = append(f30, f30elem)
		}
		ko.Spec.UsernameAttributes = f30
	} else {
		ko.Spec.UsernameAttributes = nil
	}
	if resp.UserPool.UsernameConfiguration != nil {
		f31 := &svcapitypes.UsernameConfigurationType{}
		if resp.UserPool.UsernameConfiguration.CaseSensitive != nil {
			f31.CaseSensitive = resp.UserPool.UsernameConfiguration.CaseSensitive
		}
		ko.Spec.UsernameConfiguration = f31
	} else {
		ko.Spec.UsernameConfiguration = nil
	}
	if resp.UserPool.VerificationMessageTemplate != nil {
		f32 := &svcapitypes.VerificationMessageTemplateType{}
		if resp.UserPool.VerificationMessageTemplate.DefaultEmailOption != "" {
			f32.DefaultEmailOption = aws.String(string(resp.UserPool.VerificationMessageTemplate.DefaultEmailOption))
		}
		if resp.UserPool.VerificationMessageTemplate.EmailMessage != nil {
			f32.EmailMessage = resp.UserPool.VerificationMessageTemplate.EmailMessage
		}
		if resp.UserPool.VerificationMessageTemplate.EmailMessageByLink != nil {
			f32.EmailMessageByLink = resp.UserPool.VerificationMessageTemplate.EmailMessageByLink
		}
		if resp.UserPool.VerificationMessageTemplate.EmailSubject != nil {
			f32.EmailSubject = resp.UserPool.VerificationMessageTemplate.EmailSubject
		}
		if resp.UserPool.VerificationMessageTemplate.EmailSubjectByLink != nil {
			f32.EmailSubjectByLink = resp.UserPool.VerificationMessageTemplate.EmailSubjectByLink
		}
		if resp.UserPool.VerificationMessageTemplate.SmsMessage != nil {
			f32.SmsMessage = resp.UserPool.VerificationMessageTemplate.SmsMessage
		}
		ko.Spec.VerificationMessageTemplate = f32
	} else {
		ko.Spec.VerificationMessageTemplate = nil
	}

	rm.setStatusDefaults(ko)
	output, err := rm.sdkapi.ListTagsForResource(
		ctx,
		&svcsdk.ListTagsForResourceInput{
			ResourceArn: (*string)(ko.Status.ACKResourceMetadata.ARN),
		},
	)
	rm.metrics.RecordAPICall("READ_MANY", "ListTagsForResource", err)
	if err != nil {
		return nil, err
	}

	ko.Spec.Tags = aws.StringMap(output.Tags)
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Status.ID == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.DescribeUserPoolInput, error) {
	res := &svcsdk.DescribeUserPoolInput{}

	if r.ko.Status.ID != nil {
		res.UserPoolId = r.ko.Status.ID
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateUserPoolOutput
	_ = resp
	resp, err = rm.sdkapi.CreateUserPool(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateUserPool", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.UserPool.AccountRecoverySetting != nil {
		f0 := &svcapitypes.AccountRecoverySettingType{}
		if resp.UserPool.AccountRecoverySetting.RecoveryMechanisms != nil {
			f0f0 := []*svcapitypes.RecoveryOptionType{}
			for _, f0f0iter := range resp.UserPool.AccountRecoverySetting.RecoveryMechanisms {
				f0f0elem := &svcapitypes.RecoveryOptionType{}
				if f0f0iter.Name != "" {
					f0f0elem.Name = aws.String(string(f0f0iter.Name))
				}
				if f0f0iter.Priority != nil {
					priorityCopy := int64(*f0f0iter.Priority)
					f0f0elem.Priority = &priorityCopy
				}
				f0f0 = append(f0f0, f0f0elem)
			}
			f0.RecoveryMechanisms = f0f0
		}
		ko.Spec.AccountRecoverySetting = f0
	} else {
		ko.Spec.AccountRecoverySetting = nil
	}
	if resp.UserPool.AdminCreateUserConfig != nil {
		f1 := &svcapitypes.AdminCreateUserConfigType{}
		f1.AllowAdminCreateUserOnly = &resp.UserPool.AdminCreateUserConfig.AllowAdminCreateUserOnly
		if resp.UserPool.AdminCreateUserConfig.InviteMessageTemplate != nil {
			f1f1 := &svcapitypes.MessageTemplateType{}
			if resp.UserPool.AdminCreateUserConfig.InviteMessageTemplate.EmailMessage != nil {
				f1f1.EmailMessage = resp.UserPool.AdminCreateUserConfig.InviteMessageTemplate.EmailMessage
			}
			if resp.UserPool.AdminCreateUserConfig.InviteMessageTemplate.EmailSubject != nil {
				f1f1.EmailSubject = resp.UserPool.AdminCreateUserConfig.InviteMessageTemplate.EmailSubject
			}
			if resp.UserPool.AdminCreateUserConfig.InviteMessageTemplate.SMSMessage != nil {
				f1f1.SMSMessage = resp.UserPool.AdminCreateUserConfig.InviteMessageTemplate.SMSMessage
			}
			f1.InviteMessageTemplate = f1f1
		}
		unusedAccountValidityDaysCopy := int64(resp.UserPool.AdminCreateUserConfig.UnusedAccountValidityDays)
		f1.UnusedAccountValidityDays = &unusedAccountValidityDaysCopy
		ko.Spec.AdminCreateUserConfig = f1
	} else {
		ko.Spec.AdminCreateUserConfig = nil
	}
	if resp.UserPool.AliasAttributes != nil {
		f2 := []*string{}
		for _, f2iter := range resp.UserPool.AliasAttributes {
			var f2elem *string
			f2elem = aws.String(string(f2iter))
			f2 = append(f2, f2elem)
		}
		ko.Spec.AliasAttributes = f2
	} else {
		ko.Spec.AliasAttributes = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.UserPool.Arn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.UserPool.Arn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.UserPool.AutoVerifiedAttributes != nil {
		f4 := []*string{}
		for _, f4iter := range resp.UserPool.AutoVerifiedAttributes {
			var f4elem *string
			f4elem = aws.String(string(f4iter))
			f4 = append(f4, f4elem)
		}
		ko.Spec.AutoVerifiedAttributes = f4
	} else {
		ko.Spec.AutoVerifiedAttributes = nil
	}
	if resp.UserPool.CreationDate != nil {
		ko.Status.CreationDate = &metav1.Time{*resp.UserPool.CreationDate}
	} else {
		ko.Status.CreationDate = nil
	}
	if resp.UserPool.CustomDomain != nil {
		ko.Status.CustomDomain = resp.UserPool.CustomDomain
	} else {
		ko.Status.CustomDomain = nil
	}
	if resp.UserPool.DeletionProtection != "" {
		ko.Spec.DeletionProtection = aws.String(string(resp.UserPool.DeletionProtection))
	} else {
		ko.Spec.DeletionProtection = nil
	}
	if resp.UserPool.DeviceConfiguration != nil {
		f8 := &svcapitypes.DeviceConfigurationType{}
		f8.ChallengeRequiredOnNewDevice = &resp.UserPool.DeviceConfiguration.ChallengeRequiredOnNewDevice
		f8.DeviceOnlyRememberedOnUserPrompt = &resp.UserPool.DeviceConfiguration.DeviceOnlyRememberedOnUserPrompt
		ko.Spec.DeviceConfiguration = f8
	} else {
		ko.Spec.DeviceConfiguration = nil
	}
	if resp.UserPool.Domain != nil {
		ko.Status.Domain = resp.UserPool.Domain
	} else {
		ko.Status.Domain = nil
	}
	if resp.UserPool.EmailConfiguration != nil {
		f10 := &svcapitypes.EmailConfigurationType{}
		if resp.UserPool.EmailConfiguration.ConfigurationSet != nil {
			f10.ConfigurationSet = resp.UserPool.EmailConfiguration.ConfigurationSet
		}
		if resp.UserPool.EmailConfiguration.EmailSendingAccount != "" {
			f10.EmailSendingAccount = aws.String(string(resp.UserPool.EmailConfiguration.EmailSendingAccount))
		}
		if resp.UserPool.EmailConfiguration.From != nil {
			f10.From = resp.UserPool.EmailConfiguration.From
		}
		if resp.UserPool.EmailConfiguration.ReplyToEmailAddress != nil {
			f10.ReplyToEmailAddress = resp.UserPool.EmailConfiguration.ReplyToEmailAddress
		}
		if resp.UserPool.EmailConfiguration.SourceArn != nil {
			f10.SourceARN = resp.UserPool.EmailConfiguration.SourceArn
		}
		ko.Spec.EmailConfiguration = f10
	} else {
		ko.Spec.EmailConfiguration = nil
	}
	if resp.UserPool.EmailConfigurationFailure != nil {
		ko.Status.EmailConfigurationFailure = resp.UserPool.EmailConfigurationFailure
	} else {
		ko.Status.EmailConfigurationFailure = nil
	}
	if resp.UserPool.EmailVerificationMessage != nil {
		ko.Spec.EmailVerificationMessage = resp.UserPool.EmailVerificationMessage
	} else {
		ko.Spec.EmailVerificationMessage = nil
	}
	if resp.UserPool.EmailVerificationSubject != nil {
		ko.Spec.EmailVerificationSubject = resp.UserPool.EmailVerificationSubject
	} else {
		ko.Spec.EmailVerificationSubject = nil
	}
	estimatedNumberOfUsersCopy := int64(resp.UserPool.EstimatedNumberOfUsers)
	ko.Status.EstimatedNumberOfUsers = &estimatedNumberOfUsersCopy
	if resp.UserPool.Id != nil {
		ko.Status.ID = resp.UserPool.Id
	} else {
		ko.Status.ID = nil
	}
	if resp.UserPool.LambdaConfig != nil {
		f16 := &svcapitypes.LambdaConfigType{}
		if resp.UserPool.LambdaConfig.CreateAuthChallenge != nil {
			f16.CreateAuthChallenge = resp.UserPool.LambdaConfig.CreateAuthChallenge
		}
		if resp.UserPool.LambdaConfig.CustomEmailSender != nil {
			f16f1 := &svcapitypes.CustomEmailLambdaVersionConfigType{}
			if resp.UserPool.LambdaConfig.CustomEmailSender.LambdaArn != nil {
				f16f1.LambdaARN = resp.UserPool.LambdaConfig.CustomEmailSender.LambdaArn
			}
			if resp.UserPool.LambdaConfig.CustomEmailSender.LambdaVersion != "" {
				f16f1.LambdaVersion = aws.String(string(resp.UserPool.LambdaConfig.CustomEmailSender.LambdaVersion))
			}
			f16.CustomEmailSender = f16f1
		}
		if resp.UserPool.LambdaConfig.CustomMessage != nil {
			f16.CustomMessage = resp.UserPool.LambdaConfig.CustomMessage
		}
		if resp.UserPool.LambdaConfig.CustomSMSSender != nil {
			f16f3 := &svcapitypes.CustomSMSLambdaVersionConfigType{}
			if resp.UserPool.LambdaConfig.CustomSMSSender.LambdaArn != nil {
				f16f3.LambdaARN = resp.UserPool.LambdaConfig.CustomSMSSender.LambdaArn
			}
			if resp.UserPool.LambdaConfig.CustomSMSSender.LambdaVersion != "" {
				f16f3.LambdaVersion = aws.String(string(resp.UserPool.LambdaConfig.CustomSMSSender.LambdaVersion))
			}
			f16.CustomSMSSender = f16f3
		}
		if resp.UserPool.LambdaConfig.DefineAuthChallenge != nil {
			f16.DefineAuthChallenge = resp.UserPool.LambdaConfig.DefineAuthChallenge
		}
		if resp.UserPool.LambdaConfig.KMSKeyID != nil {
			f16.KMSKeyID = resp.UserPool.LambdaConfig.KMSKeyID
		}
		if resp.UserPool.LambdaConfig.PostAuthentication != nil {
			f16.PostAuthentication = resp.UserPool.LambdaConfig.PostAuthentication
		}
		if resp.UserPool.LambdaConfig.PostConfirmation != nil {
			f16.PostConfirmation = resp.UserPool.LambdaConfig.PostConfirmation
		}
		if resp.UserPool.LambdaConfig.PreAuthentication != nil {
			f16.PreAuthentication = resp.UserPool.LambdaConfig.PreAuthentication
		}
		if resp.UserPool.LambdaConfig.PreSignUp != nil {
			f16.PreSignUp = resp.UserPool.LambdaConfig.PreSignUp
		}
		if resp.UserPool.LambdaConfig.PreTokenGeneration != nil {
			f16.PreTokenGeneration = resp.UserPool.LambdaConfig.PreTokenGeneration
		}
		if resp.UserPool.LambdaConfig.PreTokenGenerationConfig != nil {
			f16f11 := &svcapitypes.PreTokenGenerationVersionConfigType{}
			if resp.UserPool.LambdaConfig.PreTokenGenerationConfig.LambdaArn != nil {
				f16f11.LambdaARN = resp.UserPool.LambdaConfig.PreTokenGenerationConfig.LambdaArn
			}
			if resp.UserPool.LambdaConfig.PreTokenGenerationConfig.LambdaVersion != "" {
				f16f11.LambdaVersion = aws.String(string(resp.UserPool.LambdaConfig.PreTokenGenerationConfig.LambdaVersion))
			}
			f16.PreTokenGenerationConfig = f16f11
		}
		if resp.UserPool.LambdaConfig.UserMigration != nil {
			f16.UserMigration = resp.UserPool.LambdaConfig.UserMigration
		}
		if resp.UserPool.LambdaConfig.VerifyAuthChallengeResponse != nil {
			f16.VerifyAuthChallengeResponse = resp.UserPool.LambdaConfig.VerifyAuthChallengeResponse
		}
		ko.Spec.LambdaConfig = f16
	} else {
		ko.Spec.LambdaConfig = nil
	}
	if resp.UserPool.LastModifiedDate != nil {
		ko.Status.LastModifiedDate = &metav1.Time{*resp.UserPool.LastModifiedDate}
	} else {
		ko.Status.LastModifiedDate = nil
	}
	if resp.UserPool.MfaConfiguration != "" {
		ko.Spec.MFAConfiguration = aws.String(string(resp.UserPool.MfaConfiguration))
	} else {
		ko.Spec.MFAConfiguration = nil
	}
	if resp.UserPool.Name != nil {
		ko.Spec.Name = resp.UserPool.Name
	} else {
		ko.Spec.Name = nil
	}
	if resp.UserPool.Policies != nil {
		f20 := &svcapitypes.UserPoolPolicyType{}
		if resp.UserPool.Policies.PasswordPolicy != nil {
			f20f0 := &svcapitypes.PasswordPolicyType{}
			if resp.UserPool.Policies.PasswordPolicy.MinimumLength != nil {
				minimumLengthCopy := int64(*resp.UserPool.Policies.PasswordPolicy.MinimumLength)
				f20f0.MinimumLength = &minimumLengthCopy
			}
			f20f0.RequireLowercase = &resp.UserPool.Policies.PasswordPolicy.RequireLowercase
			f20f0.RequireNumbers = &resp.UserPool.Policies.PasswordPolicy.RequireNumbers
			f20f0.RequireSymbols = &resp.UserPool.Policies.PasswordPolicy.RequireSymbols
			f20f0.RequireUppercase = &resp.UserPool.Policies.PasswordPolicy.RequireUppercase
			temporaryPasswordValidityDaysCopy := int64(resp.UserPool.Policies.PasswordPolicy.TemporaryPasswordValidityDays)
			f20f0.TemporaryPasswordValidityDays = &temporaryPasswordValidityDaysCopy
			f20.PasswordPolicy = f20f0
		}
		ko.Spec.Policies = f20
	} else {
		ko.Spec.Policies = nil
	}
	if resp.UserPool.SchemaAttributes != nil {
		f21 := []*svcapitypes.SchemaAttributeType{}
		for _, f21iter := range resp.UserPool.SchemaAttributes {
			f21elem := &svcapitypes.SchemaAttributeType{}
			if f21iter.AttributeDataType != "" {
				f21elem.AttributeDataType = aws.String(string(f21iter.AttributeDataType))
			}
			if f21iter.DeveloperOnlyAttribute != nil {
				f21elem.DeveloperOnlyAttribute = f21iter.DeveloperOnlyAttribute
			}
			if f21iter.Mutable != nil {
				f21elem.Mutable = f21iter.Mutable
			}
			if f21iter.Name != nil {
				f21elem.Name = f21iter.Name
			}
			if f21iter.NumberAttributeConstraints != nil {
				f21elemf4 := &svcapitypes.NumberAttributeConstraintsType{}
				if f21iter.NumberAttributeConstraints.MaxValue != nil {
					f21elemf4.MaxValue = f21iter.NumberAttributeConstraints.MaxValue
				}
				if f21iter.NumberAttributeConstraints.MinValue != nil {
					f21elemf4.MinValue = f21iter.NumberAttributeConstraints.MinValue
				}
				f21elem.NumberAttributeConstraints = f21elemf4
			}
			if f21iter.Required != nil {
				f21elem.Required = f21iter.Required
			}
			if f21iter.StringAttributeConstraints != nil {
				f21elemf6 := &svcapitypes.StringAttributeConstraintsType{}
				if f21iter.StringAttributeConstraints.MaxLength != nil {
					f21elemf6.MaxLength = f21iter.StringAttributeConstraints.MaxLength
				}
				if f21iter.StringAttributeConstraints.MinLength != nil {
					f21elemf6.MinLength = f21iter.StringAttributeConstraints.MinLength
				}
				f21elem.StringAttributeConstraints = f21elemf6
			}
			f21 = append(f21, f21elem)
		}
		ko.Status.SchemaAttributes = f21
	} else {
		ko.Status.SchemaAttributes = nil
	}
	if resp.UserPool.SmsAuthenticationMessage != nil {
		ko.Spec.SmsAuthenticationMessage = resp.UserPool.SmsAuthenticationMessage
	} else {
		ko.Spec.SmsAuthenticationMessage = nil
	}
	if resp.UserPool.SmsConfiguration != nil {
		f23 := &svcapitypes.SmsConfigurationType{}
		if resp.UserPool.SmsConfiguration.ExternalId != nil {
			f23.ExternalID = resp.UserPool.SmsConfiguration.ExternalId
		}
		if resp.UserPool.SmsConfiguration.SnsCallerArn != nil {
			f23.SNSCallerARN = resp.UserPool.SmsConfiguration.SnsCallerArn
		}
		if resp.UserPool.SmsConfiguration.SnsRegion != nil {
			f23.SNSRegion = resp.UserPool.SmsConfiguration.SnsRegion
		}
		ko.Spec.SmsConfiguration = f23
	} else {
		ko.Spec.SmsConfiguration = nil
	}
	if resp.UserPool.SmsConfigurationFailure != nil {
		ko.Status.SmsConfigurationFailure = resp.UserPool.SmsConfigurationFailure
	} else {
		ko.Status.SmsConfigurationFailure = nil
	}
	if resp.UserPool.SmsVerificationMessage != nil {
		ko.Spec.SmsVerificationMessage = resp.UserPool.SmsVerificationMessage
	} else {
		ko.Spec.SmsVerificationMessage = nil
	}
	if resp.UserPool.Status != "" {
		ko.Status.Status = aws.String(string(resp.UserPool.Status))
	} else {
		ko.Status.Status = nil
	}
	if resp.UserPool.UserAttributeUpdateSettings != nil {
		f27 := &svcapitypes.UserAttributeUpdateSettingsType{}
		if resp.UserPool.UserAttributeUpdateSettings.AttributesRequireVerificationBeforeUpdate != nil {
			f27f0 := []*string{}
			for _, f27f0iter := range resp.UserPool.UserAttributeUpdateSettings.AttributesRequireVerificationBeforeUpdate {
				var f27f0elem *string
				f27f0elem = aws.String(string(f27f0iter))
				f27f0 = append(f27f0, f27f0elem)
			}
			f27.AttributesRequireVerificationBeforeUpdate = f27f0
		}
		ko.Spec.UserAttributeUpdateSettings = f27
	} else {
		ko.Spec.UserAttributeUpdateSettings = nil
	}
	if resp.UserPool.UserPoolAddOns != nil {
		f28 := &svcapitypes.UserPoolAddOnsType{}
		if resp.UserPool.UserPoolAddOns.AdvancedSecurityMode != "" {
			f28.AdvancedSecurityMode = aws.String(string(resp.UserPool.UserPoolAddOns.AdvancedSecurityMode))
		}
		ko.Spec.UserPoolAddOns = f28
	} else {
		ko.Spec.UserPoolAddOns = nil
	}
	if resp.UserPool.UserPoolTags != nil {
		ko.Spec.UserPoolTags = aws.StringMap(resp.UserPool.UserPoolTags)
	} else {
		ko.Spec.UserPoolTags = nil
	}
	if resp.UserPool.UsernameAttributes != nil {
		f30 := []*string{}
		for _, f30iter := range resp.UserPool.UsernameAttributes {
			var f30elem *string
			f30elem = aws.String(string(f30iter))
			f30 = append(f30, f30elem)
		}
		ko.Spec.UsernameAttributes = f30
	} else {
		ko.Spec.UsernameAttributes = nil
	}
	if resp.UserPool.UsernameConfiguration != nil {
		f31 := &svcapitypes.UsernameConfigurationType{}
		if resp.UserPool.UsernameConfiguration.CaseSensitive != nil {
			f31.CaseSensitive = resp.UserPool.UsernameConfiguration.CaseSensitive
		}
		ko.Spec.UsernameConfiguration = f31
	} else {
		ko.Spec.UsernameConfiguration = nil
	}
	if resp.UserPool.VerificationMessageTemplate != nil {
		f32 := &svcapitypes.VerificationMessageTemplateType{}
		if resp.UserPool.VerificationMessageTemplate.DefaultEmailOption != "" {
			f32.DefaultEmailOption = aws.String(string(resp.UserPool.VerificationMessageTemplate.DefaultEmailOption))
		}
		if resp.UserPool.VerificationMessageTemplate.EmailMessage != nil {
			f32.EmailMessage = resp.UserPool.VerificationMessageTemplate.EmailMessage
		}
		if resp.UserPool.VerificationMessageTemplate.EmailMessageByLink != nil {
			f32.EmailMessageByLink = resp.UserPool.VerificationMessageTemplate.EmailMessageByLink
		}
		if resp.UserPool.VerificationMessageTemplate.EmailSubject != nil {
			f32.EmailSubject = resp.UserPool.VerificationMessageTemplate.EmailSubject
		}
		if resp.UserPool.VerificationMessageTemplate.EmailSubjectByLink != nil {
			f32.EmailSubjectByLink = resp.UserPool.VerificationMessageTemplate.EmailSubjectByLink
		}
		if resp.UserPool.VerificationMessageTemplate.SmsMessage != nil {
			f32.SmsMessage = resp.UserPool.VerificationMessageTemplate.SmsMessage
		}
		ko.Spec.VerificationMessageTemplate = f32
	} else {
		ko.Spec.VerificationMessageTemplate = nil
	}

	rm.setStatusDefaults(ko)
	err = rm.SyncTags(ctx, string(*ko.Status.ACKResourceMetadata.ARN), desired.ko.Spec.Tags, ko.Spec.Tags)
	if err != nil {
		return nil, err
	}

	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateUserPoolInput, error) {
	res := &svcsdk.CreateUserPoolInput{}

	if r.ko.Spec.AccountRecoverySetting != nil {
		f0 := &svcsdktypes.AccountRecoverySettingType{}
		if r.ko.Spec.AccountRecoverySetting.RecoveryMechanisms != nil {
			f0f0 := []svcsdktypes.RecoveryOptionType{}
			for _, f0f0iter := range r.ko.Spec.AccountRecoverySetting.RecoveryMechanisms {
				f0f0elem := &svcsdktypes.RecoveryOptionType{}
				if f0f0iter.Name != nil {
					f0f0elem.Name = svcsdktypes.RecoveryOptionNameType(*f0f0iter.Name)
				}
				if f0f0iter.Priority != nil {
					priorityCopy0 := *f0f0iter.Priority
					if priorityCopy0 > math.MaxInt32 || priorityCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field Priority is of type int32")
					}
					priorityCopy := int32(priorityCopy0)
					f0f0elem.Priority = &priorityCopy
				}
				f0f0 = append(f0f0, *f0f0elem)
			}
			f0.RecoveryMechanisms = f0f0
		}
		res.AccountRecoverySetting = f0
	}
	if r.ko.Spec.AdminCreateUserConfig != nil {
		f1 := &svcsdktypes.AdminCreateUserConfigType{}
		if r.ko.Spec.AdminCreateUserConfig.AllowAdminCreateUserOnly != nil {
			f1.AllowAdminCreateUserOnly = *r.ko.Spec.AdminCreateUserConfig.AllowAdminCreateUserOnly
		}
		if r.ko.Spec.AdminCreateUserConfig.InviteMessageTemplate != nil {
			f1f1 := &svcsdktypes.MessageTemplateType{}
			if r.ko.Spec.AdminCreateUserConfig.InviteMessageTemplate.EmailMessage != nil {
				f1f1.EmailMessage = r.ko.Spec.AdminCreateUserConfig.InviteMessageTemplate.EmailMessage
			}
			if r.ko.Spec.AdminCreateUserConfig.InviteMessageTemplate.EmailSubject != nil {
				f1f1.EmailSubject = r.ko.Spec.AdminCreateUserConfig.InviteMessageTemplate.EmailSubject
			}
			if r.ko.Spec.AdminCreateUserConfig.InviteMessageTemplate.SMSMessage != nil {
				f1f1.SMSMessage = r.ko.Spec.AdminCreateUserConfig.InviteMessageTemplate.SMSMessage
			}
			f1.InviteMessageTemplate = f1f1
		}
		if r.ko.Spec.AdminCreateUserConfig.UnusedAccountValidityDays != nil {
			unusedAccountValidityDaysCopy0 := *r.ko.Spec.AdminCreateUserConfig.UnusedAccountValidityDays
			if unusedAccountValidityDaysCopy0 > math.MaxInt32 || unusedAccountValidityDaysCopy0 < math.MinInt32 {
				return nil, fmt.Errorf("error: field UnusedAccountValidityDays is of type int32")
			}
			unusedAccountValidityDaysCopy := int32(unusedAccountValidityDaysCopy0)
			f1.UnusedAccountValidityDays = unusedAccountValidityDaysCopy
		}
		res.AdminCreateUserConfig = f1
	}
	if r.ko.Spec.AliasAttributes != nil {
		f2 := []svcsdktypes.AliasAttributeType{}
		for _, f2iter := range r.ko.Spec.AliasAttributes {
			var f2elem string
			f2elem = string(*f2iter)
			f2 = append(f2, svcsdktypes.AliasAttributeType(f2elem))
		}
		res.AliasAttributes = f2
	}
	if r.ko.Spec.AutoVerifiedAttributes != nil {
		f3 := []svcsdktypes.VerifiedAttributeType{}
		for _, f3iter := range r.ko.Spec.AutoVerifiedAttributes {
			var f3elem string
			f3elem = string(*f3iter)
			f3 = append(f3, svcsdktypes.VerifiedAttributeType(f3elem))
		}
		res.AutoVerifiedAttributes = f3
	}
	if r.ko.Spec.DeletionProtection != nil {
		res.DeletionProtection = svcsdktypes.DeletionProtectionType(*r.ko.Spec.DeletionProtection)
	}
	if r.ko.Spec.DeviceConfiguration != nil {
		f5 := &svcsdktypes.DeviceConfigurationType{}
		if r.ko.Spec.DeviceConfiguration.ChallengeRequiredOnNewDevice != nil {
			f5.ChallengeRequiredOnNewDevice = *r.ko.Spec.DeviceConfiguration.ChallengeRequiredOnNewDevice
		}
		if r.ko.Spec.DeviceConfiguration.DeviceOnlyRememberedOnUserPrompt != nil {
			f5.DeviceOnlyRememberedOnUserPrompt = *r.ko.Spec.DeviceConfiguration.DeviceOnlyRememberedOnUserPrompt
		}
		res.DeviceConfiguration = f5
	}
	if r.ko.Spec.EmailConfiguration != nil {
		f6 := &svcsdktypes.EmailConfigurationType{}
		if r.ko.Spec.EmailConfiguration.ConfigurationSet != nil {
			f6.ConfigurationSet = r.ko.Spec.EmailConfiguration.ConfigurationSet
		}
		if r.ko.Spec.EmailConfiguration.EmailSendingAccount != nil {
			f6.EmailSendingAccount = svcsdktypes.EmailSendingAccountType(*r.ko.Spec.EmailConfiguration.EmailSendingAccount)
		}
		if r.ko.Spec.EmailConfiguration.From != nil {
			f6.From = r.ko.Spec.EmailConfiguration.From
		}
		if r.ko.Spec.EmailConfiguration.ReplyToEmailAddress != nil {
			f6.ReplyToEmailAddress = r.ko.Spec.EmailConfiguration.ReplyToEmailAddress
		}
		if r.ko.Spec.EmailConfiguration.SourceARN != nil {
			f6.SourceArn = r.ko.Spec.EmailConfiguration.SourceARN
		}
		res.EmailConfiguration = f6
	}
	if r.ko.Spec.EmailVerificationMessage != nil {
		res.EmailVerificationMessage = r.ko.Spec.EmailVerificationMessage
	}
	if r.ko.Spec.EmailVerificationSubject != nil {
		res.EmailVerificationSubject = r.ko.Spec.EmailVerificationSubject
	}
	if r.ko.Spec.LambdaConfig != nil {
		f9 := &svcsdktypes.LambdaConfigType{}
		if r.ko.Spec.LambdaConfig.CreateAuthChallenge != nil {
			f9.CreateAuthChallenge = r.ko.Spec.LambdaConfig.CreateAuthChallenge
		}
		if r.ko.Spec.LambdaConfig.CustomEmailSender != nil {
			f9f1 := &svcsdktypes.CustomEmailLambdaVersionConfigType{}
			if r.ko.Spec.LambdaConfig.CustomEmailSender.LambdaARN != nil {
				f9f1.LambdaArn = r.ko.Spec.LambdaConfig.CustomEmailSender.LambdaARN
			}
			if r.ko.Spec.LambdaConfig.CustomEmailSender.LambdaVersion != nil {
				f9f1.LambdaVersion = svcsdktypes.CustomEmailSenderLambdaVersionType(*r.ko.Spec.LambdaConfig.CustomEmailSender.LambdaVersion)
			}
			f9.CustomEmailSender = f9f1
		}
		if r.ko.Spec.LambdaConfig.CustomMessage != nil {
			f9.CustomMessage = r.ko.Spec.LambdaConfig.CustomMessage
		}
		if r.ko.Spec.LambdaConfig.CustomSMSSender != nil {
			f9f3 := &svcsdktypes.CustomSMSLambdaVersionConfigType{}
			if r.ko.Spec.LambdaConfig.CustomSMSSender.LambdaARN != nil {
				f9f3.LambdaArn = r.ko.Spec.LambdaConfig.CustomSMSSender.LambdaARN
			}
			if r.ko.Spec.LambdaConfig.CustomSMSSender.LambdaVersion != nil {
				f9f3.LambdaVersion = svcsdktypes.CustomSMSSenderLambdaVersionType(*r.ko.Spec.LambdaConfig.CustomSMSSender.LambdaVersion)
			}
			f9.CustomSMSSender = f9f3
		}
		if r.ko.Spec.LambdaConfig.DefineAuthChallenge != nil {
			f9.DefineAuthChallenge = r.ko.Spec.LambdaConfig.DefineAuthChallenge
		}
		if r.ko.Spec.LambdaConfig.KMSKeyID != nil {
			f9.KMSKeyID = r.ko.Spec.LambdaConfig.KMSKeyID
		}
		if r.ko.Spec.LambdaConfig.PostAuthentication != nil {
			f9.PostAuthentication = r.ko.Spec.LambdaConfig.PostAuthentication
		}
		if r.ko.Spec.LambdaConfig.PostConfirmation != nil {
			f9.PostConfirmation = r.ko.Spec.LambdaConfig.PostConfirmation
		}
		if r.ko.Spec.LambdaConfig.PreAuthentication != nil {
			f9.PreAuthentication = r.ko.Spec.LambdaConfig.PreAuthentication
		}
		if r.ko.Spec.LambdaConfig.PreSignUp != nil {
			f9.PreSignUp = r.ko.Spec.LambdaConfig.PreSignUp
		}
		if r.ko.Spec.LambdaConfig.PreTokenGeneration != nil {
			f9.PreTokenGeneration = r.ko.Spec.LambdaConfig.PreTokenGeneration
		}
		if r.ko.Spec.LambdaConfig.PreTokenGenerationConfig != nil {
			f9f11 := &svcsdktypes.PreTokenGenerationVersionConfigType{}
			if r.ko.Spec.LambdaConfig.PreTokenGenerationConfig.LambdaARN != nil {
				f9f11.LambdaArn = r.ko.Spec.LambdaConfig.PreTokenGenerationConfig.LambdaARN
			}
			if r.ko.Spec.LambdaConfig.PreTokenGenerationConfig.LambdaVersion != nil {
				f9f11.LambdaVersion = svcsdktypes.PreTokenGenerationLambdaVersionType(*r.ko.Spec.LambdaConfig.PreTokenGenerationConfig.LambdaVersion)
			}
			f9.PreTokenGenerationConfig = f9f11
		}
		if r.ko.Spec.LambdaConfig.UserMigration != nil {
			f9.UserMigration = r.ko.Spec.LambdaConfig.UserMigration
		}
		if r.ko.Spec.LambdaConfig.VerifyAuthChallengeResponse != nil {
			f9.VerifyAuthChallengeResponse = r.ko.Spec.LambdaConfig.VerifyAuthChallengeResponse
		}
		res.LambdaConfig = f9
	}
	if r.ko.Spec.MFAConfiguration != nil {
		res.MfaConfiguration = svcsdktypes.UserPoolMfaType(*r.ko.Spec.MFAConfiguration)
	}
	if r.ko.Spec.Policies != nil {
		f11 := &svcsdktypes.UserPoolPolicyType{}
		if r.ko.Spec.Policies.PasswordPolicy != nil {
			f11f0 := &svcsdktypes.PasswordPolicyType{}
			if r.ko.Spec.Policies.PasswordPolicy.MinimumLength != nil {
				minimumLengthCopy0 := *r.ko.Spec.Policies.PasswordPolicy.MinimumLength
				if minimumLengthCopy0 > math.MaxInt32 || minimumLengthCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field MinimumLength is of type int32")
				}
				minimumLengthCopy := int32(minimumLengthCopy0)
				f11f0.MinimumLength = &minimumLengthCopy
			}
			if r.ko.Spec.Policies.PasswordPolicy.RequireLowercase != nil {
				f11f0.RequireLowercase = *r.ko.Spec.Policies.PasswordPolicy.RequireLowercase
			}
			if r.ko.Spec.Policies.PasswordPolicy.RequireNumbers != nil {
				f11f0.RequireNumbers = *r.ko.Spec.Policies.PasswordPolicy.RequireNumbers
			}
			if r.ko.Spec.Policies.PasswordPolicy.RequireSymbols != nil {
				f11f0.RequireSymbols = *r.ko.Spec.Policies.PasswordPolicy.RequireSymbols
			}
			if r.ko.Spec.Policies.PasswordPolicy.RequireUppercase != nil {
				f11f0.RequireUppercase = *r.ko.Spec.Policies.PasswordPolicy.RequireUppercase
			}
			if r.ko.Spec.Policies.PasswordPolicy.TemporaryPasswordValidityDays != nil {
				temporaryPasswordValidityDaysCopy0 := *r.ko.Spec.Policies.PasswordPolicy.TemporaryPasswordValidityDays
				if temporaryPasswordValidityDaysCopy0 > math.MaxInt32 || temporaryPasswordValidityDaysCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field TemporaryPasswordValidityDays is of type int32")
				}
				temporaryPasswordValidityDaysCopy := int32(temporaryPasswordValidityDaysCopy0)
				f11f0.TemporaryPasswordValidityDays = temporaryPasswordValidityDaysCopy
			}
			f11.PasswordPolicy = f11f0
		}
		res.Policies = f11
	}
	if r.ko.Spec.Name != nil {
		res.PoolName = r.ko.Spec.Name
	}
	if r.ko.Spec.Schema != nil {
		f13 := []svcsdktypes.SchemaAttributeType{}
		for _, f13iter := range r.ko.Spec.Schema {
			f13elem := &svcsdktypes.SchemaAttributeType{}
			if f13iter.AttributeDataType != nil {
				f13elem.AttributeDataType = svcsdktypes.AttributeDataType(*f13iter.AttributeDataType)
			}
			if f13iter.DeveloperOnlyAttribute != nil {
				f13elem.DeveloperOnlyAttribute = f13iter.DeveloperOnlyAttribute
			}
			if f13iter.Mutable != nil {
				f13elem.Mutable = f13iter.Mutable
			}
			if f13iter.Name != nil {
				f13elem.Name = f13iter.Name
			}
			if f13iter.NumberAttributeConstraints != nil {
				f13elemf4 := &svcsdktypes.NumberAttributeConstraintsType{}
				if f13iter.NumberAttributeConstraints.MaxValue != nil {
					f13elemf4.MaxValue = f13iter.NumberAttributeConstraints.MaxValue
				}
				if f13iter.NumberAttributeConstraints.MinValue != nil {
					f13elemf4.MinValue = f13iter.NumberAttributeConstraints.MinValue
				}
				f13elem.NumberAttributeConstraints = f13elemf4
			}
			if f13iter.Required != nil {
				f13elem.Required = f13iter.Required
			}
			if f13iter.StringAttributeConstraints != nil {
				f13elemf6 := &svcsdktypes.StringAttributeConstraintsType{}
				if f13iter.StringAttributeConstraints.MaxLength != nil {
					f13elemf6.MaxLength = f13iter.StringAttributeConstraints.MaxLength
				}
				if f13iter.StringAttributeConstraints.MinLength != nil {
					f13elemf6.MinLength = f13iter.StringAttributeConstraints.MinLength
				}
				f13elem.StringAttributeConstraints = f13elemf6
			}
			f13 = append(f13, *f13elem)
		}
		res.Schema = f13
	}
	if r.ko.Spec.SmsAuthenticationMessage != nil {
		res.SmsAuthenticationMessage = r.ko.Spec.SmsAuthenticationMessage
	}
	if r.ko.Spec.SmsConfiguration != nil {
		f15 := &svcsdktypes.SmsConfigurationType{}
		if r.ko.Spec.SmsConfiguration.ExternalID != nil {
			f15.ExternalId = r.ko.Spec.SmsConfiguration.ExternalID
		}
		if r.ko.Spec.SmsConfiguration.SNSCallerARN != nil {
			f15.SnsCallerArn = r.ko.Spec.SmsConfiguration.SNSCallerARN
		}
		if r.ko.Spec.SmsConfiguration.SNSRegion != nil {
			f15.SnsRegion = r.ko.Spec.SmsConfiguration.SNSRegion
		}
		res.SmsConfiguration = f15
	}
	if r.ko.Spec.SmsVerificationMessage != nil {
		res.SmsVerificationMessage = r.ko.Spec.SmsVerificationMessage
	}
	if r.ko.Spec.UserAttributeUpdateSettings != nil {
		f17 := &svcsdktypes.UserAttributeUpdateSettingsType{}
		if r.ko.Spec.UserAttributeUpdateSettings.AttributesRequireVerificationBeforeUpdate != nil {
			f17f0 := []svcsdktypes.VerifiedAttributeType{}
			for _, f17f0iter := range r.ko.Spec.UserAttributeUpdateSettings.AttributesRequireVerificationBeforeUpdate {
				var f17f0elem string
				f17f0elem = string(*f17f0iter)
				f17f0 = append(f17f0, svcsdktypes.VerifiedAttributeType(f17f0elem))
			}
			f17.AttributesRequireVerificationBeforeUpdate = f17f0
		}
		res.UserAttributeUpdateSettings = f17
	}
	if r.ko.Spec.UserPoolAddOns != nil {
		f18 := &svcsdktypes.UserPoolAddOnsType{}
		if r.ko.Spec.UserPoolAddOns.AdvancedSecurityMode != nil {
			f18.AdvancedSecurityMode = svcsdktypes.AdvancedSecurityModeType(*r.ko.Spec.UserPoolAddOns.AdvancedSecurityMode)
		}
		res.UserPoolAddOns = f18
	}
	if r.ko.Spec.UserPoolTags != nil {
		res.UserPoolTags = aws.ToStringMap(r.ko.Spec.UserPoolTags)
	}
	if r.ko.Spec.UsernameAttributes != nil {
		f20 := []svcsdktypes.UsernameAttributeType{}
		for _, f20iter := range r.ko.Spec.UsernameAttributes {
			var f20elem string
			f20elem = string(*f20iter)
			f20 = append(f20, svcsdktypes.UsernameAttributeType(f20elem))
		}
		res.UsernameAttributes = f20
	}
	if r.ko.Spec.UsernameConfiguration != nil {
		f21 := &svcsdktypes.UsernameConfigurationType{}
		if r.ko.Spec.UsernameConfiguration.CaseSensitive != nil {
			f21.CaseSensitive = r.ko.Spec.UsernameConfiguration.CaseSensitive
		}
		res.UsernameConfiguration = f21
	}
	if r.ko.Spec.VerificationMessageTemplate != nil {
		f22 := &svcsdktypes.VerificationMessageTemplateType{}
		if r.ko.Spec.VerificationMessageTemplate.DefaultEmailOption != nil {
			f22.DefaultEmailOption = svcsdktypes.DefaultEmailOptionType(*r.ko.Spec.VerificationMessageTemplate.DefaultEmailOption)
		}
		if r.ko.Spec.VerificationMessageTemplate.EmailMessage != nil {
			f22.EmailMessage = r.ko.Spec.VerificationMessageTemplate.EmailMessage
		}
		if r.ko.Spec.VerificationMessageTemplate.EmailMessageByLink != nil {
			f22.EmailMessageByLink = r.ko.Spec.VerificationMessageTemplate.EmailMessageByLink
		}
		if r.ko.Spec.VerificationMessageTemplate.EmailSubject != nil {
			f22.EmailSubject = r.ko.Spec.VerificationMessageTemplate.EmailSubject
		}
		if r.ko.Spec.VerificationMessageTemplate.EmailSubjectByLink != nil {
			f22.EmailSubjectByLink = r.ko.Spec.VerificationMessageTemplate.EmailSubjectByLink
		}
		if r.ko.Spec.VerificationMessageTemplate.SmsMessage != nil {
			f22.SmsMessage = r.ko.Spec.VerificationMessageTemplate.SmsMessage
		}
		res.VerificationMessageTemplate = f22
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer func() {
		exit(err)
	}()
	if delta.DifferentAt("Spec.Tags") {
		if err = rm.SyncTags(
			ctx,
			string(*latest.ko.Status.ACKResourceMetadata.ARN),
			desired.ko.Spec.Tags,
			latest.ko.Spec.Tags,
		); err != nil {
			return nil, err
		}
	}
	if !delta.DifferentExcept("Spec.Tags") {
		return desired, nil
	}

	input, err := rm.newUpdateRequestPayload(ctx, desired, delta)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.UpdateUserPoolOutput
	_ = resp
	resp, err = rm.sdkapi.UpdateUserPool(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "UpdateUserPool", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
	delta *ackcompare.Delta,
) (*svcsdk.UpdateUserPoolInput, error) {
	res := &svcsdk.UpdateUserPoolInput{}

	if r.ko.Spec.AccountRecoverySetting != nil {
		f0 := &svcsdktypes.AccountRecoverySettingType{}
		if r.ko.Spec.AccountRecoverySetting.RecoveryMechanisms != nil {
			f0f0 := []svcsdktypes.RecoveryOptionType{}
			for _, f0f0iter := range r.ko.Spec.AccountRecoverySetting.RecoveryMechanisms {
				f0f0elem := &svcsdktypes.RecoveryOptionType{}
				if f0f0iter.Name != nil {
					f0f0elem.Name = svcsdktypes.RecoveryOptionNameType(*f0f0iter.Name)
				}
				if f0f0iter.Priority != nil {
					priorityCopy0 := *f0f0iter.Priority
					if priorityCopy0 > math.MaxInt32 || priorityCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field Priority is of type int32")
					}
					priorityCopy := int32(priorityCopy0)
					f0f0elem.Priority = &priorityCopy
				}
				f0f0 = append(f0f0, *f0f0elem)
			}
			f0.RecoveryMechanisms = f0f0
		}
		res.AccountRecoverySetting = f0
	}
	if r.ko.Spec.AdminCreateUserConfig != nil {
		f1 := &svcsdktypes.AdminCreateUserConfigType{}
		if r.ko.Spec.AdminCreateUserConfig.AllowAdminCreateUserOnly != nil {
			f1.AllowAdminCreateUserOnly = *r.ko.Spec.AdminCreateUserConfig.AllowAdminCreateUserOnly
		}
		if r.ko.Spec.AdminCreateUserConfig.InviteMessageTemplate != nil {
			f1f1 := &svcsdktypes.MessageTemplateType{}
			if r.ko.Spec.AdminCreateUserConfig.InviteMessageTemplate.EmailMessage != nil {
				f1f1.EmailMessage = r.ko.Spec.AdminCreateUserConfig.InviteMessageTemplate.EmailMessage
			}
			if r.ko.Spec.AdminCreateUserConfig.InviteMessageTemplate.EmailSubject != nil {
				f1f1.EmailSubject = r.ko.Spec.AdminCreateUserConfig.InviteMessageTemplate.EmailSubject
			}
			if r.ko.Spec.AdminCreateUserConfig.InviteMessageTemplate.SMSMessage != nil {
				f1f1.SMSMessage = r.ko.Spec.AdminCreateUserConfig.InviteMessageTemplate.SMSMessage
			}
			f1.InviteMessageTemplate = f1f1
		}
		if r.ko.Spec.AdminCreateUserConfig.UnusedAccountValidityDays != nil {
			unusedAccountValidityDaysCopy0 := *r.ko.Spec.AdminCreateUserConfig.UnusedAccountValidityDays
			if unusedAccountValidityDaysCopy0 > math.MaxInt32 || unusedAccountValidityDaysCopy0 < math.MinInt32 {
				return nil, fmt.Errorf("error: field UnusedAccountValidityDays is of type int32")
			}
			unusedAccountValidityDaysCopy := int32(unusedAccountValidityDaysCopy0)
			f1.UnusedAccountValidityDays = unusedAccountValidityDaysCopy
		}
		res.AdminCreateUserConfig = f1
	}
	if r.ko.Spec.AutoVerifiedAttributes != nil {
		f2 := []svcsdktypes.VerifiedAttributeType{}
		for _, f2iter := range r.ko.Spec.AutoVerifiedAttributes {
			var f2elem string
			f2elem = string(*f2iter)
			f2 = append(f2, svcsdktypes.VerifiedAttributeType(f2elem))
		}
		res.AutoVerifiedAttributes = f2
	}
	if r.ko.Spec.DeletionProtection != nil {
		res.DeletionProtection = svcsdktypes.DeletionProtectionType(*r.ko.Spec.DeletionProtection)
	}
	if r.ko.Spec.DeviceConfiguration != nil {
		f4 := &svcsdktypes.DeviceConfigurationType{}
		if r.ko.Spec.DeviceConfiguration.ChallengeRequiredOnNewDevice != nil {
			f4.ChallengeRequiredOnNewDevice = *r.ko.Spec.DeviceConfiguration.ChallengeRequiredOnNewDevice
		}
		if r.ko.Spec.DeviceConfiguration.DeviceOnlyRememberedOnUserPrompt != nil {
			f4.DeviceOnlyRememberedOnUserPrompt = *r.ko.Spec.DeviceConfiguration.DeviceOnlyRememberedOnUserPrompt
		}
		res.DeviceConfiguration = f4
	}
	if r.ko.Spec.EmailConfiguration != nil {
		f5 := &svcsdktypes.EmailConfigurationType{}
		if r.ko.Spec.EmailConfiguration.ConfigurationSet != nil {
			f5.ConfigurationSet = r.ko.Spec.EmailConfiguration.ConfigurationSet
		}
		if r.ko.Spec.EmailConfiguration.EmailSendingAccount != nil {
			f5.EmailSendingAccount = svcsdktypes.EmailSendingAccountType(*r.ko.Spec.EmailConfiguration.EmailSendingAccount)
		}
		if r.ko.Spec.EmailConfiguration.From != nil {
			f5.From = r.ko.Spec.EmailConfiguration.From
		}
		if r.ko.Spec.EmailConfiguration.ReplyToEmailAddress != nil {
			f5.ReplyToEmailAddress = r.ko.Spec.EmailConfiguration.ReplyToEmailAddress
		}
		if r.ko.Spec.EmailConfiguration.SourceARN != nil {
			f5.SourceArn = r.ko.Spec.EmailConfiguration.SourceARN
		}
		res.EmailConfiguration = f5
	}
	if r.ko.Spec.EmailVerificationMessage != nil {
		res.EmailVerificationMessage = r.ko.Spec.EmailVerificationMessage
	}
	if r.ko.Spec.EmailVerificationSubject != nil {
		res.EmailVerificationSubject = r.ko.Spec.EmailVerificationSubject
	}
	if r.ko.Spec.LambdaConfig != nil {
		f8 := &svcsdktypes.LambdaConfigType{}
		if r.ko.Spec.LambdaConfig.CreateAuthChallenge != nil {
			f8.CreateAuthChallenge = r.ko.Spec.LambdaConfig.CreateAuthChallenge
		}
		if r.ko.Spec.LambdaConfig.CustomEmailSender != nil {
			f8f1 := &svcsdktypes.CustomEmailLambdaVersionConfigType{}
			if r.ko.Spec.LambdaConfig.CustomEmailSender.LambdaARN != nil {
				f8f1.LambdaArn = r.ko.Spec.LambdaConfig.CustomEmailSender.LambdaARN
			}
			if r.ko.Spec.LambdaConfig.CustomEmailSender.LambdaVersion != nil {
				f8f1.LambdaVersion = svcsdktypes.CustomEmailSenderLambdaVersionType(*r.ko.Spec.LambdaConfig.CustomEmailSender.LambdaVersion)
			}
			f8.CustomEmailSender = f8f1
		}
		if r.ko.Spec.LambdaConfig.CustomMessage != nil {
			f8.CustomMessage = r.ko.Spec.LambdaConfig.CustomMessage
		}
		if r.ko.Spec.LambdaConfig.CustomSMSSender != nil {
			f8f3 := &svcsdktypes.CustomSMSLambdaVersionConfigType{}
			if r.ko.Spec.LambdaConfig.CustomSMSSender.LambdaARN != nil {
				f8f3.LambdaArn = r.ko.Spec.LambdaConfig.CustomSMSSender.LambdaARN
			}
			if r.ko.Spec.LambdaConfig.CustomSMSSender.LambdaVersion != nil {
				f8f3.LambdaVersion = svcsdktypes.CustomSMSSenderLambdaVersionType(*r.ko.Spec.LambdaConfig.CustomSMSSender.LambdaVersion)
			}
			f8.CustomSMSSender = f8f3
		}
		if r.ko.Spec.LambdaConfig.DefineAuthChallenge != nil {
			f8.DefineAuthChallenge = r.ko.Spec.LambdaConfig.DefineAuthChallenge
		}
		if r.ko.Spec.LambdaConfig.KMSKeyID != nil {
			f8.KMSKeyID = r.ko.Spec.LambdaConfig.KMSKeyID
		}
		if r.ko.Spec.LambdaConfig.PostAuthentication != nil {
			f8.PostAuthentication = r.ko.Spec.LambdaConfig.PostAuthentication
		}
		if r.ko.Spec.LambdaConfig.PostConfirmation != nil {
			f8.PostConfirmation = r.ko.Spec.LambdaConfig.PostConfirmation
		}
		if r.ko.Spec.LambdaConfig.PreAuthentication != nil {
			f8.PreAuthentication = r.ko.Spec.LambdaConfig.PreAuthentication
		}
		if r.ko.Spec.LambdaConfig.PreSignUp != nil {
			f8.PreSignUp = r.ko.Spec.LambdaConfig.PreSignUp
		}
		if r.ko.Spec.LambdaConfig.PreTokenGeneration != nil {
			f8.PreTokenGeneration = r.ko.Spec.LambdaConfig.PreTokenGeneration
		}
		if r.ko.Spec.LambdaConfig.PreTokenGenerationConfig != nil {
			f8f11 := &svcsdktypes.PreTokenGenerationVersionConfigType{}
			if r.ko.Spec.LambdaConfig.PreTokenGenerationConfig.LambdaARN != nil {
				f8f11.LambdaArn = r.ko.Spec.LambdaConfig.PreTokenGenerationConfig.LambdaARN
			}
			if r.ko.Spec.LambdaConfig.PreTokenGenerationConfig.LambdaVersion != nil {
				f8f11.LambdaVersion = svcsdktypes.PreTokenGenerationLambdaVersionType(*r.ko.Spec.LambdaConfig.PreTokenGenerationConfig.LambdaVersion)
			}
			f8.PreTokenGenerationConfig = f8f11
		}
		if r.ko.Spec.LambdaConfig.UserMigration != nil {
			f8.UserMigration = r.ko.Spec.LambdaConfig.UserMigration
		}
		if r.ko.Spec.LambdaConfig.VerifyAuthChallengeResponse != nil {
			f8.VerifyAuthChallengeResponse = r.ko.Spec.LambdaConfig.VerifyAuthChallengeResponse
		}
		res.LambdaConfig = f8
	}
	if r.ko.Spec.MFAConfiguration != nil {
		res.MfaConfiguration = svcsdktypes.UserPoolMfaType(*r.ko.Spec.MFAConfiguration)
	}
	if r.ko.Spec.Policies != nil {
		f10 := &svcsdktypes.UserPoolPolicyType{}
		if r.ko.Spec.Policies.PasswordPolicy != nil {
			f10f0 := &svcsdktypes.PasswordPolicyType{}
			if r.ko.Spec.Policies.PasswordPolicy.MinimumLength != nil {
				minimumLengthCopy0 := *r.ko.Spec.Policies.PasswordPolicy.MinimumLength
				if minimumLengthCopy0 > math.MaxInt32 || minimumLengthCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field MinimumLength is of type int32")
				}
				minimumLengthCopy := int32(minimumLengthCopy0)
				f10f0.MinimumLength = &minimumLengthCopy
			}
			if r.ko.Spec.Policies.PasswordPolicy.RequireLowercase != nil {
				f10f0.RequireLowercase = *r.ko.Spec.Policies.PasswordPolicy.RequireLowercase
			}
			if r.ko.Spec.Policies.PasswordPolicy.RequireNumbers != nil {
				f10f0.RequireNumbers = *r.ko.Spec.Policies.PasswordPolicy.RequireNumbers
			}
			if r.ko.Spec.Policies.PasswordPolicy.RequireSymbols != nil {
				f10f0.RequireSymbols = *r.ko.Spec.Policies.PasswordPolicy.RequireSymbols
			}
			if r.ko.Spec.Policies.PasswordPolicy.RequireUppercase != nil {
				f10f0.RequireUppercase = *r.ko.Spec.Policies.PasswordPolicy.RequireUppercase
			}
			if r.ko.Spec.Policies.PasswordPolicy.TemporaryPasswordValidityDays != nil {
				temporaryPasswordValidityDaysCopy0 := *r.ko.Spec.Policies.PasswordPolicy.TemporaryPasswordValidityDays
				if temporaryPasswordValidityDaysCopy0 > math.MaxInt32 || temporaryPasswordValidityDaysCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field TemporaryPasswordValidityDays is of type int32")
				}
				temporaryPasswordValidityDaysCopy := int32(temporaryPasswordValidityDaysCopy0)
				f10f0.TemporaryPasswordValidityDays = temporaryPasswordValidityDaysCopy
			}
			f10.PasswordPolicy = f10f0
		}
		res.Policies = f10
	}
	if r.ko.Spec.SmsAuthenticationMessage != nil {
		res.SmsAuthenticationMessage = r.ko.Spec.SmsAuthenticationMessage
	}
	if r.ko.Spec.SmsConfiguration != nil {
		f13 := &svcsdktypes.SmsConfigurationType{}
		if r.ko.Spec.SmsConfiguration.ExternalID != nil {
			f13.ExternalId = r.ko.Spec.SmsConfiguration.ExternalID
		}
		if r.ko.Spec.SmsConfiguration.SNSCallerARN != nil {
			f13.SnsCallerArn = r.ko.Spec.SmsConfiguration.SNSCallerARN
		}
		if r.ko.Spec.SmsConfiguration.SNSRegion != nil {
			f13.SnsRegion = r.ko.Spec.SmsConfiguration.SNSRegion
		}
		res.SmsConfiguration = f13
	}
	if r.ko.Spec.SmsVerificationMessage != nil {
		res.SmsVerificationMessage = r.ko.Spec.SmsVerificationMessage
	}
	if r.ko.Spec.UserAttributeUpdateSettings != nil {
		f15 := &svcsdktypes.UserAttributeUpdateSettingsType{}
		if r.ko.Spec.UserAttributeUpdateSettings.AttributesRequireVerificationBeforeUpdate != nil {
			f15f0 := []svcsdktypes.VerifiedAttributeType{}
			for _, f15f0iter := range r.ko.Spec.UserAttributeUpdateSettings.AttributesRequireVerificationBeforeUpdate {
				var f15f0elem string
				f15f0elem = string(*f15f0iter)
				f15f0 = append(f15f0, svcsdktypes.VerifiedAttributeType(f15f0elem))
			}
			f15.AttributesRequireVerificationBeforeUpdate = f15f0
		}
		res.UserAttributeUpdateSettings = f15
	}
	if r.ko.Spec.UserPoolAddOns != nil {
		f16 := &svcsdktypes.UserPoolAddOnsType{}
		if r.ko.Spec.UserPoolAddOns.AdvancedSecurityMode != nil {
			f16.AdvancedSecurityMode = svcsdktypes.AdvancedSecurityModeType(*r.ko.Spec.UserPoolAddOns.AdvancedSecurityMode)
		}
		res.UserPoolAddOns = f16
	}
	if r.ko.Status.ID != nil {
		res.UserPoolId = r.ko.Status.ID
	}
	if r.ko.Spec.UserPoolTags != nil {
		res.UserPoolTags = aws.ToStringMap(r.ko.Spec.UserPoolTags)
	}
	if r.ko.Spec.VerificationMessageTemplate != nil {
		f20 := &svcsdktypes.VerificationMessageTemplateType{}
		if r.ko.Spec.VerificationMessageTemplate.DefaultEmailOption != nil {
			f20.DefaultEmailOption = svcsdktypes.DefaultEmailOptionType(*r.ko.Spec.VerificationMessageTemplate.DefaultEmailOption)
		}
		if r.ko.Spec.VerificationMessageTemplate.EmailMessage != nil {
			f20.EmailMessage = r.ko.Spec.VerificationMessageTemplate.EmailMessage
		}
		if r.ko.Spec.VerificationMessageTemplate.EmailMessageByLink != nil {
			f20.EmailMessageByLink = r.ko.Spec.VerificationMessageTemplate.EmailMessageByLink
		}
		if r.ko.Spec.VerificationMessageTemplate.EmailSubject != nil {
			f20.EmailSubject = r.ko.Spec.VerificationMessageTemplate.EmailSubject
		}
		if r.ko.Spec.VerificationMessageTemplate.EmailSubjectByLink != nil {
			f20.EmailSubjectByLink = r.ko.Spec.VerificationMessageTemplate.EmailSubjectByLink
		}
		if r.ko.Spec.VerificationMessageTemplate.SmsMessage != nil {
			f20.SmsMessage = r.ko.Spec.VerificationMessageTemplate.SmsMessage
		}
		res.VerificationMessageTemplate = f20
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeleteUserPoolOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteUserPool(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteUserPool", err)
	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteUserPoolInput, error) {
	res := &svcsdk.DeleteUserPoolInput{}

	if r.ko.Status.ID != nil {
		res.UserPoolId = r.ko.Status.ID
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.UserPool,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	if err == nil {
		return false
	}

	var terminalErr smithy.APIError
	if !errors.As(err, &terminalErr) {
		return false
	}
	switch terminalErr.ErrorCode() {
	case "InvalidParameterException":
		return true
	default:
		return false
	}
}
